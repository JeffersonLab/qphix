cmake_minimum_required(VERSION 3.1)
project(QPhiX)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_EXTENSIONS OFF)

option(parallel_arch "Build for parallel arch: scalar/parscalar" scalar)
option(testing "Enable building of tests. This can take a long time" OFF)
option(cean "Enable CILK array Notation" OFF)
option(mm_malloc "Use mm_malloc to allocate memory (unless qdpalloc is enabled, in which case QDP++ allocator will be used" ON)
option(clover "Enable building of clover term. Default is ON" ON)
option(twisted_mass "Enable building of twisted mass term. Default is OFF" OFF)
option(tm_clover "Enable building of twisted mass + clover term. Default if OFF" OFF)
option(fake_comms "Enable fake comms. Does face processing but no actual comms" OFF)
option(extra_messages "Emit extram messages during compilation time" OFF)
option(isa "Enable use of code for particular isa. Allowed are: avx avx2 avx512 sse scalar" OFF)
option(qdpjit "When QDP++ is used it is QDP-JIT so use QDP-JIT interfaces" OFF)
option(qdpalloc "When QDP++ is used, use its memory allocator instead of mm_malloc or posix_memalign" OFF)
option(QDPXX_DIR "Directory where QDPXX is installed" OFF)
option(QMP_DIR   "Directory where QMP is installed" OFF)
option(QPHIX_CODEGEN "Directory where QPHIX Codegen is installed" OFF)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/CMakeModules/")

# Have to use either QMP or QDPXX ( or later pure MPI )
if ( QMP_DIR AND QDPXX_DIR )
  message(ERROR "Use either QMP_DIR or QDPXX_DIR but not both")
endif()


# First Look for QDPXX
if( QDPXX_DIR )
  message(STATUS, "Looking for QDP++")
  set( CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}" "${QDPXX_DIR}")
  find_package( QDPXX )
  if( QDPXX_CXX_FOUND )
     include_directories(${QDPXX_CXX_INCLUDE_PATH})
     LIST(APPEND EXT_CXXFLAGS "${QDPXX_CXX_COMPILE_FLAGS}")
     LIST(REMOVE_DUPLICATES EXT_CXXFLAGS )
     LIST(APPEND EXT_LIBS ${QDPXX_CXX_LINK_FLAGS})
     LIST(APPEND EXT_LIBS ${QDPXX_CXX_LIBRARIES})
     set( QPHIX_USE_QDPXX TRUE)
     if( qdpalloc ) 
	set( QPHIX_USE_QDPXX_ALLOC 1 )
     endif()
  endif( QDPXX_CXX_FOUND )
 else(QDPXX_DIR)
  message( STATUS "Not Looking for QDP++")
  set( QPHIX_USE_QDPXX FALSE)
endif(QDPXX_DIR)

if( QMP_DIR )
  message(STATUS "Looking for QMP")
  set( CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}" "${QMP_DIR}")

  # Find package QMP
  find_package( QMP )

  # Check for QMP
  if ( QMP_C_FOUND )
    include_directories(${QMP_C_INCLUDE_PATH})
    LIST(APPEND EXT_LIBS ${QMP_C_LINK_FLAGS} )
    LIST(APPEND EXT_LIBS ${QMP_C_LIBRARIES} )
  endif( QMP_C_FOUND )
else( QMP_DIR )
  message(STATUS "Not Looking for QMP")
endif( QMP_DIR )



if( QPHIX_USE_QDPXX ) 
  # If we are using QDP++ Check the parallel arch
  SET( parallel_arch ${QDPXX_PARALLEL_ARCH} )
endif()


if( parallel_arch STREQUAL "scalar" )
   # set in configure file
   set(QPHIX_SCALAR 1)
   message(INFO "Scalar Comms Mode (single node)")
   if ( fake_comms ) 
      message(INFO "Fake Comms will be used") 
      set( QPHIX_DO_COMMS 1)
      set( QPHIX_FAKE_COMMS 1)
   endif()
elseif( parallel_arch STREQUAL "parscalar")
   message(INFO "Parscalar comms mode (QMP + OpenMP)")
   set( QPHIX_PARSCALAR 1)

   if( fake_comms ) 
	message(ERROR "Cannot do fake comms in parscalar mode")
   else if( QMP_C_FOUND OR QDP_CXX_FOUND )
        message(INFO "Regular QMP Comms")
        set( QPHIX_DO_COMMS 1)
        set( QPHIX_QMP_COMMS 1)
   else() 
	message(ERROR "Parscalar comms but neither QMP nor QDPXX found")
   endif()
else()
   message(ERROR "Only scalar or parscalar modes supported")
endif()

if ( cean )
   set( QPHIX_USE_CEAN 1)
endif()

if ( mm_malloc )
   set( QPHIX_USE_MM_MALLOC 1)
endif()

if( clover ) 
   set( QPHIX_BUILD_CLOVER 1)
endif()

if( twisted_mass ) 
   set( QPHIX_BUILD_TWISTED_MASS 1)
endif()

if( tm_clover )
   set( QPHIX_BUILD_TWISTED_MASS_WITH_CLOVER 1)
endif()

set( build_qpx FALSE )
set( ISA ${isa}
set( QPHIX_LLC_CACHE_ALIGN 64)

if( ${isa} STREQUAL "avx" )
  message(INFO "Building for AVX" )
  set( QPHIX_AVX_SOURCE 1 )
elseif( ${isa} STREQUAL "avx2" )
  message(INFO "Building for AVX2" )
  set( QPHIX_AVX2_SOURCE 1 )
elseif( ${isa} STREQUAL "avx512" )
  message(INFO "Building for AVX512" )
  set( QPHIX_AVX512_SOURCE 1 )
elseif( ${isa} STREQUAL "sse" )
  message(INFO "Building for SSE" )
  set( QPHIX_SSE_SOURCE 1 )
elseif( ${isa} STREQUAL "mic" )
  message(INFO "Building for MIC (KNC)" )
  set( QPHIX_MIC_SOURCE 1 )
elseif( ${isa} STREQUAL "scalar" )
  message(INFO "Building for straight C (nonvectorized")
  set( QPHIX_SCALAR_SORUCE 1 )
elseif( ${isa} STREQUAL "qpx" )
  message(INFO "Building for QPX (BG/Q)")
  set( QPHIX_QPX_SOURCE 1)
  set( QPHIX_LLC_CACHE_ALIGN 128 )
  set( build_qpx TRUE )
endif()

set( build_qdpjit_clover FALSE )
if ( qdpjit ) 
  message(INFO "Building with QDPJIT")
  set( QPHIX_BUILD_QDPJIT 1)
  if( clover ) 
    set( build_qdpjit_clover TRUE )
  endif()
endif()

if( clover ) 
  if( build_qdpjit_clover) 
    MESSAGE(INFO "Building QDPJIT Clover Term")
  else()
    message(INFO "Building Regular QDP++ Clover term")
  endif() 
endif()

if( testing ) 
   message(INFO "Building Tests")
else()
   message(INFO "Not Building Tests")
endif()

if (extra_messages) 
   set( QPHIX_EMIT_MESSAGES 1)
endif()

if( QPHIX_CODEGEN ) 
  message(INFO "Importing QPhix Codegen from ${QPHIX_CODEGEN}" )
  include_directories( ${QPHIX_CODEGEN}/include )
  add_library(qphix_codegen STATIC_IMPORTED)
  set_property(TARGET qphix_codegen PROPERTY IMPORTED_LOCATION ${QPHIX_CODEGEN}/lib/libqphix_codegen.a)
else()
  message(ERROR "This branch will in the future build libqphix_codegen.a on demand, but not quite yet")
endif()

configure_file(
	${PROJECT_SOURCE_DIR}/include/qphix/qphix_config_internal.h.in.cmake
	${PROJECT_BINARY_DIR}/include/qphix/qphix_config.h 
)

include_directories(${PROJECT_SOURCE_DIR}/include)
include_directories(${PROJECT_BINARY_DIR}/include)

add_subdirectory(include)
add_subdirectory(lib)
add_subdirectory(tests)
