__m512 b_S0_C0_RE = _mm512_setzero_ps(); 
__m512 b_S0_C0_IM = _mm512_setzero_ps(); 
__m512 b_S0_C1_RE = _mm512_setzero_ps(); 
__m512 b_S0_C1_IM = _mm512_setzero_ps(); 
__m512 b_S0_C2_RE = _mm512_setzero_ps(); 
__m512 b_S0_C2_IM = _mm512_setzero_ps(); 
__m512 b_S1_C0_RE = _mm512_setzero_ps(); 
__m512 b_S1_C0_IM = _mm512_setzero_ps(); 
__m512 b_S1_C1_RE = _mm512_setzero_ps(); 
__m512 b_S1_C1_IM = _mm512_setzero_ps(); 
__m512 b_S1_C2_RE = _mm512_setzero_ps(); 
__m512 b_S1_C2_IM = _mm512_setzero_ps(); 
__m512 ub_S0_C0_RE = _mm512_setzero_ps(); 
__m512 ub_S0_C0_IM = _mm512_setzero_ps(); 
__m512 ub_S0_C1_RE = _mm512_setzero_ps(); 
__m512 ub_S0_C1_IM = _mm512_setzero_ps(); 
__m512 ub_S0_C2_RE = _mm512_setzero_ps(); 
__m512 ub_S0_C2_IM = _mm512_setzero_ps(); 
__m512 ub_S1_C0_RE = _mm512_setzero_ps(); 
__m512 ub_S1_C0_IM = _mm512_setzero_ps(); 
__m512 ub_S1_C1_RE = _mm512_setzero_ps(); 
__m512 ub_S1_C1_IM = _mm512_setzero_ps(); 
__m512 ub_S1_C2_RE = _mm512_setzero_ps(); 
__m512 ub_S1_C2_IM = _mm512_setzero_ps(); 
__m512 out_S0_C0_RE = _mm512_setzero_ps(); 
__m512 out_S0_C0_IM = _mm512_setzero_ps(); 
__m512 out_S0_C1_RE = _mm512_setzero_ps(); 
__m512 out_S0_C1_IM = _mm512_setzero_ps(); 
__m512 out_S0_C2_RE = _mm512_setzero_ps(); 
__m512 out_S0_C2_IM = _mm512_setzero_ps(); 
__m512 out_S1_C0_RE = _mm512_setzero_ps(); 
__m512 out_S1_C0_IM = _mm512_setzero_ps(); 
__m512 out_S1_C1_RE = _mm512_setzero_ps(); 
__m512 out_S1_C1_IM = _mm512_setzero_ps(); 
__m512 out_S1_C2_RE = _mm512_setzero_ps(); 
__m512 out_S1_C2_IM = _mm512_setzero_ps(); 
__m512 out_S2_C0_RE = _mm512_setzero_ps(); 
__m512 out_S2_C0_IM = _mm512_setzero_ps(); 
__m512 out_S2_C1_RE = _mm512_setzero_ps(); 
__m512 out_S2_C1_IM = _mm512_setzero_ps(); 
__m512 out_S2_C2_RE = _mm512_setzero_ps(); 
__m512 out_S2_C2_IM = _mm512_setzero_ps(); 
__m512 out_S3_C0_RE = _mm512_setzero_ps(); 
__m512 out_S3_C0_IM = _mm512_setzero_ps(); 
__m512 out_S3_C1_RE = _mm512_setzero_ps(); 
__m512 out_S3_C1_IM = _mm512_setzero_ps(); 
__m512 out_S3_C2_RE = _mm512_setzero_ps(); 
__m512 out_S3_C2_IM = _mm512_setzero_ps(); 
__m512 u_00_re = _mm512_setzero_ps(); 
__m512 u_00_im = _mm512_setzero_ps(); 
__m512 u_01_re = _mm512_setzero_ps(); 
__m512 u_01_im = _mm512_setzero_ps(); 
__m512 u_02_re = _mm512_setzero_ps(); 
__m512 u_02_im = _mm512_setzero_ps(); 
__m512 u_10_re = _mm512_setzero_ps(); 
__m512 u_10_im = _mm512_setzero_ps(); 
__m512 u_11_re = _mm512_setzero_ps(); 
__m512 u_11_im = _mm512_setzero_ps(); 
__m512 u_12_re = _mm512_setzero_ps(); 
__m512 u_12_im = _mm512_setzero_ps(); 
__m512 u_20_re = _mm512_setzero_ps(); 
__m512 u_20_im = _mm512_setzero_ps(); 
__m512 u_21_re = _mm512_setzero_ps(); 
__m512 u_21_im = _mm512_setzero_ps(); 
__m512 u_22_re = _mm512_setzero_ps(); 
__m512 u_22_im = _mm512_setzero_ps(); 
__m512 psi_S0_RE = _mm512_setzero_ps(); 
__m512 psi_S0_IM = _mm512_setzero_ps(); 
__m512 psi_S1_RE = _mm512_setzero_ps(); 
__m512 psi_S1_IM = _mm512_setzero_ps(); 
__m512 tmp_1_re = _mm512_setzero_ps(); 
__m512 tmp_1_im = _mm512_setzero_ps(); 
__m512 tmp_2_re = _mm512_setzero_ps(); 
__m512 tmp_2_im = _mm512_setzero_ps(); 
__m512 tmp_3_re = _mm512_setzero_ps(); 
__m512 tmp_3_im = _mm512_setzero_ps(); 
__m512 tmp_4_re = _mm512_setzero_ps(); 
__m512 tmp_4_im = _mm512_setzero_ps(); 
__m512 zero = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((inbuf) + hsprefdist)+0) ), _MM_HINT_T1);

zero = _mm512_setzero_ps(); 
__m512 dout_S0_C0_RE = _mm512_setzero_ps(); 
__m512 dout_S0_C0_IM = _mm512_setzero_ps(); 
__m512 dout_S0_C1_RE = _mm512_setzero_ps(); 
__m512 dout_S0_C1_IM = _mm512_setzero_ps(); 
__m512 dout_S0_C2_RE = _mm512_setzero_ps(); 
__m512 dout_S0_C2_IM = _mm512_setzero_ps(); 
__m512 dout_S1_C0_RE = _mm512_setzero_ps(); 
__m512 dout_S1_C0_IM = _mm512_setzero_ps(); 
__m512 dout_S1_C1_RE = _mm512_setzero_ps(); 
__m512 dout_S1_C1_IM = _mm512_setzero_ps(); 
__m512 dout_S1_C2_RE = _mm512_setzero_ps(); 
__m512 dout_S1_C2_IM = _mm512_setzero_ps(); 
__m512 dout_S2_C0_RE = _mm512_setzero_ps(); 
__m512 dout_S2_C0_IM = _mm512_setzero_ps(); 
__m512 dout_S2_C1_RE = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((inbuf) + hsprefdist)+32) ), _MM_HINT_T1);

__m512 dout_S2_C1_IM = _mm512_setzero_ps(); 
__m512 dout_S2_C2_RE = _mm512_setzero_ps(); 
__m512 dout_S2_C2_IM = _mm512_setzero_ps(); 
__m512 dout_S3_C0_RE = _mm512_setzero_ps(); 
__m512 dout_S3_C0_IM = _mm512_setzero_ps(); 
__m512 dout_S3_C1_RE = _mm512_setzero_ps(); 
__m512 dout_S3_C1_IM = _mm512_setzero_ps(); 
__m512 dout_S3_C2_RE = _mm512_setzero_ps(); 
__m512 dout_S3_C2_IM = _mm512_setzero_ps(); 
__m512 cl_full_00_RE = _mm512_setzero_ps(); 
__m512 cl_full_00_IM = _mm512_setzero_ps(); 
__m512 cl_full_01_RE = _mm512_setzero_ps(); 
__m512 cl_full_01_IM = _mm512_setzero_ps(); 
__m512 cl_full_02_RE = _mm512_setzero_ps(); 
__m512 cl_full_02_IM = _mm512_setzero_ps(); 
__m512 cl_full_03_RE = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((inbuf) + hsprefdist)+64) ), _MM_HINT_T1);

__m512 cl_full_03_IM = _mm512_setzero_ps(); 
__m512 cl_full_04_RE = _mm512_setzero_ps(); 
__m512 cl_full_04_IM = _mm512_setzero_ps(); 
__m512 cl_full_05_RE = _mm512_setzero_ps(); 
__m512 cl_full_05_IM = _mm512_setzero_ps(); 
__m512 cl_full_10_RE = _mm512_setzero_ps(); 
__m512 cl_full_10_IM = _mm512_setzero_ps(); 
__m512 cl_full_11_RE = _mm512_setzero_ps(); 
__m512 cl_full_11_IM = _mm512_setzero_ps(); 
__m512 cl_full_12_RE = _mm512_setzero_ps(); 
__m512 cl_full_12_IM = _mm512_setzero_ps(); 
__m512 cl_full_13_RE = _mm512_setzero_ps(); 
__m512 cl_full_13_IM = _mm512_setzero_ps(); 
__m512 cl_full_14_RE = _mm512_setzero_ps(); 
__m512 cl_full_14_IM = _mm512_setzero_ps(); 
__m512 cl_full_15_RE = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((inbuf) + hsprefdist)+96) ), _MM_HINT_T1);

__m512 cl_full_15_IM = _mm512_setzero_ps(); 
__m512 cl_full_20_RE = _mm512_setzero_ps(); 
__m512 cl_full_20_IM = _mm512_setzero_ps(); 
__m512 cl_full_21_RE = _mm512_setzero_ps(); 
__m512 cl_full_21_IM = _mm512_setzero_ps(); 
__m512 cl_full_22_RE = _mm512_setzero_ps(); 
__m512 cl_full_22_IM = _mm512_setzero_ps(); 
__m512 cl_full_23_RE = _mm512_setzero_ps(); 
__m512 cl_full_23_IM = _mm512_setzero_ps(); 
__m512 cl_full_24_RE = _mm512_setzero_ps(); 
__m512 cl_full_24_IM = _mm512_setzero_ps(); 
__m512 cl_full_25_RE = _mm512_setzero_ps(); 
__m512 cl_full_25_IM = _mm512_setzero_ps(); 
__m512 cl_full_30_RE = _mm512_setzero_ps(); 
__m512 cl_full_30_IM = _mm512_setzero_ps(); 
__m512 cl_full_31_RE = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((inbuf) + hsprefdist)+128) ), _MM_HINT_T1);

__m512 cl_full_31_IM = _mm512_setzero_ps(); 
__m512 cl_full_32_RE = _mm512_setzero_ps(); 
__m512 cl_full_32_IM = _mm512_setzero_ps(); 
__m512 cl_full_33_RE = _mm512_setzero_ps(); 
__m512 cl_full_33_IM = _mm512_setzero_ps(); 
__m512 cl_full_34_RE = _mm512_setzero_ps(); 
__m512 cl_full_34_IM = _mm512_setzero_ps(); 
__m512 cl_full_35_RE = _mm512_setzero_ps(); 
__m512 cl_full_35_IM = _mm512_setzero_ps(); 
__m512 cl_full_40_RE = _mm512_setzero_ps(); 
__m512 cl_full_40_IM = _mm512_setzero_ps(); 
__m512 cl_full_41_RE = _mm512_setzero_ps(); 
__m512 cl_full_41_IM = _mm512_setzero_ps(); 
__m512 cl_full_42_RE = _mm512_setzero_ps(); 
__m512 cl_full_42_IM = _mm512_setzero_ps(); 
__m512 cl_full_43_RE = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((inbuf) + hsprefdist)+160) ), _MM_HINT_T1);

__m512 cl_full_43_IM = _mm512_setzero_ps(); 
__m512 cl_full_44_RE = _mm512_setzero_ps(); 
__m512 cl_full_44_IM = _mm512_setzero_ps(); 
__m512 cl_full_45_RE = _mm512_setzero_ps(); 
__m512 cl_full_45_IM = _mm512_setzero_ps(); 
__m512 cl_full_50_RE = _mm512_setzero_ps(); 
__m512 cl_full_50_IM = _mm512_setzero_ps(); 
__m512 cl_full_51_RE = _mm512_setzero_ps(); 
__m512 cl_full_51_IM = _mm512_setzero_ps(); 
__m512 cl_full_52_RE = _mm512_setzero_ps(); 
__m512 cl_full_52_IM = _mm512_setzero_ps(); 
__m512 cl_full_53_RE = _mm512_setzero_ps(); 
__m512 cl_full_53_IM = _mm512_setzero_ps(); 
__m512 cl_full_54_RE = _mm512_setzero_ps(); 
__m512 cl_full_54_IM = _mm512_setzero_ps(); 
__m512 cl_full_55_RE = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((*gBase)[7][0][0][0] + gprefdist)+0) ), _MM_HINT_T1);

__m512 cl_full_55_IM = _mm512_setzero_ps(); 
__m512 beta_vec = _mm512_setzero_ps(); 
beta_vec = _mm512_cvtph_ps(_mm256_set1_epi16(*(&beta)));

dout_S0_C0_RE = _mm512_setzero_ps(); 
dout_S0_C0_IM = _mm512_setzero_ps(); 
dout_S0_C1_RE = _mm512_setzero_ps(); 
dout_S0_C1_IM = _mm512_setzero_ps(); 
dout_S0_C2_RE = _mm512_setzero_ps(); 
dout_S0_C2_IM = _mm512_setzero_ps(); 
dout_S1_C0_RE = _mm512_setzero_ps(); 
dout_S1_C0_IM = _mm512_setzero_ps(); 
dout_S1_C1_RE = _mm512_setzero_ps(); 
dout_S1_C1_IM = _mm512_setzero_ps(); 
dout_S1_C2_RE = _mm512_setzero_ps(); 
dout_S1_C2_IM = _mm512_setzero_ps(); 
dout_S2_C0_RE = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( (((*gBase)[7][0][0][0] + gprefdist)+32) ), _MM_HINT_T1);

dout_S2_C0_IM = _mm512_setzero_ps(); 
dout_S2_C1_RE = _mm512_setzero_ps(); 
dout_S2_C1_IM = _mm512_setzero_ps(); 
dout_S2_C2_RE = _mm512_setzero_ps(); 
dout_S2_C2_IM = _mm512_setzero_ps(); 
dout_S3_C0_RE = _mm512_setzero_ps(); 
dout_S3_C0_IM = _mm512_setzero_ps(); 
dout_S3_C1_RE = _mm512_setzero_ps(); 
dout_S3_C1_IM = _mm512_setzero_ps(); 
dout_S3_C2_RE = _mm512_setzero_ps(); 
dout_S3_C2_IM = _mm512_setzero_ps(); 
 _mm_prefetch((const char *)( ((inbuf)+0) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+0) + offs[0]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+0) + offs[4]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+0) + offs[8]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+0) + offs[12]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*gBase)[7][0][0][0] + gprefdist)+64) ), _MM_HINT_T1);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+32) + offs[0]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+32) + offs[4]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+32) + offs[8]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+32) + offs[12]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+64) + offs[0]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+64) + offs[4]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+64) + offs[8]) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*oBase)[0][0][0]+64) + offs[12]) ), _MM_HINT_T0);

out_S0_C0_RE = _mm512_undefined(); 
out_S0_C0_RE = _mm512_mask_expand_ps(out_S0_C0_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[0]))));

out_S0_C0_RE = _mm512_mask_expand_ps(out_S0_C0_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[4]))));

out_S0_C0_RE = _mm512_mask_expand_ps(out_S0_C0_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[8]))));

out_S0_C0_RE = _mm512_mask_expand_ps(out_S0_C0_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[12]))));

out_S0_C0_IM = _mm512_undefined(); 
out_S0_C0_IM = _mm512_mask_expand_ps(out_S0_C0_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[0]))));

out_S0_C0_IM = _mm512_mask_expand_ps(out_S0_C0_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[4]))));

 _mm_prefetch((const char *)( (((*gBase)[7][0][0][0] + gprefdist)+96) ), _MM_HINT_T1);

out_S0_C0_IM = _mm512_mask_expand_ps(out_S0_C0_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[8]))));

out_S0_C0_IM = _mm512_mask_expand_ps(out_S0_C0_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[12]))));

out_S1_C0_RE = _mm512_undefined(); 
out_S1_C0_RE = _mm512_mask_expand_ps(out_S1_C0_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[0]))));

out_S1_C0_RE = _mm512_mask_expand_ps(out_S1_C0_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[4]))));

out_S1_C0_RE = _mm512_mask_expand_ps(out_S1_C0_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[8]))));

out_S1_C0_RE = _mm512_mask_expand_ps(out_S1_C0_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[12]))));

out_S1_C0_IM = _mm512_undefined(); 
out_S1_C0_IM = _mm512_mask_expand_ps(out_S1_C0_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[0]))));

out_S1_C0_IM = _mm512_mask_expand_ps(out_S1_C0_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[4]))));

out_S1_C0_IM = _mm512_mask_expand_ps(out_S1_C0_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[8]))));

out_S1_C0_IM = _mm512_mask_expand_ps(out_S1_C0_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[12]))));

out_S2_C0_RE = _mm512_undefined(); 
out_S2_C0_RE = _mm512_mask_expand_ps(out_S2_C0_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[0]))));

out_S2_C0_RE = _mm512_mask_expand_ps(out_S2_C0_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[4]))));

out_S2_C0_RE = _mm512_mask_expand_ps(out_S2_C0_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[8]))));

 _mm_prefetch((const char *)( (((*gBase)[7][0][0][0] + gprefdist)+128) ), _MM_HINT_T1);

out_S2_C0_RE = _mm512_mask_expand_ps(out_S2_C0_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[12]))));

out_S2_C0_IM = _mm512_undefined(); 
out_S2_C0_IM = _mm512_mask_expand_ps(out_S2_C0_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[0]))));

out_S2_C0_IM = _mm512_mask_expand_ps(out_S2_C0_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[4]))));

out_S2_C0_IM = _mm512_mask_expand_ps(out_S2_C0_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[8]))));

out_S2_C0_IM = _mm512_mask_expand_ps(out_S2_C0_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[12]))));

out_S3_C0_RE = _mm512_undefined(); 
out_S3_C0_RE = _mm512_mask_expand_ps(out_S3_C0_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[0]))));

out_S3_C0_RE = _mm512_mask_expand_ps(out_S3_C0_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[4]))));

out_S3_C0_RE = _mm512_mask_expand_ps(out_S3_C0_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[8]))));

out_S3_C0_RE = _mm512_mask_expand_ps(out_S3_C0_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[12]))));

out_S3_C0_IM = _mm512_undefined(); 
out_S3_C0_IM = _mm512_mask_expand_ps(out_S3_C0_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[0]))));

out_S3_C0_IM = _mm512_mask_expand_ps(out_S3_C0_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[4]))));

out_S3_C0_IM = _mm512_mask_expand_ps(out_S3_C0_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[8]))));

out_S3_C0_IM = _mm512_mask_expand_ps(out_S3_C0_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[12]))));

 _mm_prefetch((const char *)( (((*gBase)[7][0][0][0] + gprefdist)+160) ), _MM_HINT_T1);

out_S0_C1_RE = _mm512_undefined(); 
out_S0_C1_RE = _mm512_mask_expand_ps(out_S0_C1_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[0]))));

out_S0_C1_RE = _mm512_mask_expand_ps(out_S0_C1_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[4]))));

out_S0_C1_RE = _mm512_mask_expand_ps(out_S0_C1_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[8]))));

out_S0_C1_RE = _mm512_mask_expand_ps(out_S0_C1_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[12]))));

out_S0_C1_IM = _mm512_undefined(); 
out_S0_C1_IM = _mm512_mask_expand_ps(out_S0_C1_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[0]))));

out_S0_C1_IM = _mm512_mask_expand_ps(out_S0_C1_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[4]))));

out_S0_C1_IM = _mm512_mask_expand_ps(out_S0_C1_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[8]))));

out_S0_C1_IM = _mm512_mask_expand_ps(out_S0_C1_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[12]))));

out_S1_C1_RE = _mm512_undefined(); 
out_S1_C1_RE = _mm512_mask_expand_ps(out_S1_C1_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[0]))));

out_S1_C1_RE = _mm512_mask_expand_ps(out_S1_C1_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[4]))));

out_S1_C1_RE = _mm512_mask_expand_ps(out_S1_C1_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[8]))));

out_S1_C1_RE = _mm512_mask_expand_ps(out_S1_C1_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[12]))));

out_S1_C1_IM = _mm512_undefined(); 
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+0) ), _MM_HINT_T1);

out_S1_C1_IM = _mm512_mask_expand_ps(out_S1_C1_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[0]))));

out_S1_C1_IM = _mm512_mask_expand_ps(out_S1_C1_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[4]))));

out_S1_C1_IM = _mm512_mask_expand_ps(out_S1_C1_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[8]))));

out_S1_C1_IM = _mm512_mask_expand_ps(out_S1_C1_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[12]))));

out_S2_C1_RE = _mm512_undefined(); 
out_S2_C1_RE = _mm512_mask_expand_ps(out_S2_C1_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[0]))));

out_S2_C1_RE = _mm512_mask_expand_ps(out_S2_C1_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[4]))));

out_S2_C1_RE = _mm512_mask_expand_ps(out_S2_C1_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[8]))));

out_S2_C1_RE = _mm512_mask_expand_ps(out_S2_C1_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[12]))));

out_S2_C1_IM = _mm512_undefined(); 
out_S2_C1_IM = _mm512_mask_expand_ps(out_S2_C1_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[0]))));

out_S2_C1_IM = _mm512_mask_expand_ps(out_S2_C1_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[4]))));

out_S2_C1_IM = _mm512_mask_expand_ps(out_S2_C1_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[8]))));

out_S2_C1_IM = _mm512_mask_expand_ps(out_S2_C1_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[12]))));

out_S3_C1_RE = _mm512_undefined(); 
out_S3_C1_RE = _mm512_mask_expand_ps(out_S3_C1_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[0]))));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+32) ), _MM_HINT_T1);

out_S3_C1_RE = _mm512_mask_expand_ps(out_S3_C1_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[4]))));

out_S3_C1_RE = _mm512_mask_expand_ps(out_S3_C1_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[8]))));

out_S3_C1_RE = _mm512_mask_expand_ps(out_S3_C1_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[12]))));

out_S3_C1_IM = _mm512_undefined(); 
out_S3_C1_IM = _mm512_mask_expand_ps(out_S3_C1_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[0]))));

out_S3_C1_IM = _mm512_mask_expand_ps(out_S3_C1_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[4]))));

out_S3_C1_IM = _mm512_mask_expand_ps(out_S3_C1_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[8]))));

out_S3_C1_IM = _mm512_mask_expand_ps(out_S3_C1_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[12]))));

out_S0_C2_RE = _mm512_undefined(); 
out_S0_C2_RE = _mm512_mask_expand_ps(out_S0_C2_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[0]))));

out_S0_C2_RE = _mm512_mask_expand_ps(out_S0_C2_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[4]))));

out_S0_C2_RE = _mm512_mask_expand_ps(out_S0_C2_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[8]))));

out_S0_C2_RE = _mm512_mask_expand_ps(out_S0_C2_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[12]))));

out_S0_C2_IM = _mm512_undefined(); 
out_S0_C2_IM = _mm512_mask_expand_ps(out_S0_C2_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[0]))));

out_S0_C2_IM = _mm512_mask_expand_ps(out_S0_C2_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[4]))));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+64) ), _MM_HINT_T1);

out_S0_C2_IM = _mm512_mask_expand_ps(out_S0_C2_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[8]))));

out_S0_C2_IM = _mm512_mask_expand_ps(out_S0_C2_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[12]))));

out_S1_C2_RE = _mm512_undefined(); 
out_S1_C2_RE = _mm512_mask_expand_ps(out_S1_C2_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[0]))));

out_S1_C2_RE = _mm512_mask_expand_ps(out_S1_C2_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[4]))));

out_S1_C2_RE = _mm512_mask_expand_ps(out_S1_C2_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[8]))));

out_S1_C2_RE = _mm512_mask_expand_ps(out_S1_C2_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[12]))));

out_S1_C2_IM = _mm512_undefined(); 
out_S1_C2_IM = _mm512_mask_expand_ps(out_S1_C2_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[0]))));

out_S1_C2_IM = _mm512_mask_expand_ps(out_S1_C2_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[4]))));

out_S1_C2_IM = _mm512_mask_expand_ps(out_S1_C2_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[8]))));

out_S1_C2_IM = _mm512_mask_expand_ps(out_S1_C2_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[12]))));

out_S2_C2_RE = _mm512_undefined(); 
out_S2_C2_RE = _mm512_mask_expand_ps(out_S2_C2_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[0]))));

out_S2_C2_RE = _mm512_mask_expand_ps(out_S2_C2_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[4]))));

out_S2_C2_RE = _mm512_mask_expand_ps(out_S2_C2_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[8]))));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+96) ), _MM_HINT_T1);

out_S2_C2_RE = _mm512_mask_expand_ps(out_S2_C2_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[12]))));

out_S2_C2_IM = _mm512_undefined(); 
out_S2_C2_IM = _mm512_mask_expand_ps(out_S2_C2_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[0]))));

out_S2_C2_IM = _mm512_mask_expand_ps(out_S2_C2_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[4]))));

out_S2_C2_IM = _mm512_mask_expand_ps(out_S2_C2_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[8]))));

out_S2_C2_IM = _mm512_mask_expand_ps(out_S2_C2_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[12]))));

out_S3_C2_RE = _mm512_undefined(); 
out_S3_C2_RE = _mm512_mask_expand_ps(out_S3_C2_RE, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[0]))));

out_S3_C2_RE = _mm512_mask_expand_ps(out_S3_C2_RE, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[4]))));

out_S3_C2_RE = _mm512_mask_expand_ps(out_S3_C2_RE, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[8]))));

out_S3_C2_RE = _mm512_mask_expand_ps(out_S3_C2_RE, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[12]))));

out_S3_C2_IM = _mm512_undefined(); 
out_S3_C2_IM = _mm512_mask_expand_ps(out_S3_C2_IM, 0xf, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[0]))));

out_S3_C2_IM = _mm512_mask_expand_ps(out_S3_C2_IM, 0xf0, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[4]))));

out_S3_C2_IM = _mm512_mask_expand_ps(out_S3_C2_IM, 0xf00, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[8]))));

out_S3_C2_IM = _mm512_mask_expand_ps(out_S3_C2_IM, 0xf000, _mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[12]))));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+128) ), _MM_HINT_T1);

b_S0_C0_RE = _mm512_mask_cvtph_ps(b_S0_C0_RE, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+0)));

b_S0_C0_IM = _mm512_mask_cvtph_ps(b_S0_C0_IM, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+16)));

b_S0_C1_RE = _mm512_mask_cvtph_ps(b_S0_C1_RE, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+32)));

b_S0_C1_IM = _mm512_mask_cvtph_ps(b_S0_C1_IM, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+48)));

b_S0_C2_RE = _mm512_mask_cvtph_ps(b_S0_C2_RE, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+64)));

b_S0_C2_IM = _mm512_mask_cvtph_ps(b_S0_C2_IM, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+80)));

b_S1_C0_RE = _mm512_mask_cvtph_ps(b_S1_C0_RE, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+96)));

b_S1_C0_IM = _mm512_mask_cvtph_ps(b_S1_C0_IM, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+112)));

b_S1_C1_RE = _mm512_mask_cvtph_ps(b_S1_C1_RE, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+128)));

b_S1_C1_IM = _mm512_mask_cvtph_ps(b_S1_C1_IM, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+144)));

b_S1_C2_RE = _mm512_mask_cvtph_ps(b_S1_C2_RE, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+160)));

b_S1_C2_IM = _mm512_mask_cvtph_ps(b_S1_C2_IM, 0xFFFF, _mm256_load_si256((__m256i*)((inbuf)+176)));

 _mm_prefetch((const char *)( ((*gBase)[7][0][0][0]+0) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*gBase)[7][0][0][0]+32) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*gBase)[7][0][0][0]+64) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*gBase)[7][0][0][0]+96) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+160) ), _MM_HINT_T1);

 _mm_prefetch((const char *)( ((*gBase)[7][0][0][0]+128) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*gBase)[7][0][0][0]+160) ), _MM_HINT_T0);

u_00_re = _mm512_mask_cvtph_ps(u_00_re, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][0][0][0]));

u_00_im = _mm512_mask_cvtph_ps(u_00_im, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][0][0][1]));

u_01_re = _mm512_mask_cvtph_ps(u_01_re, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][0][1][0]));

u_01_im = _mm512_mask_cvtph_ps(u_01_im, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][0][1][1]));

u_02_re = _mm512_mask_cvtph_ps(u_02_re, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][0][2][0]));

u_02_im = _mm512_mask_cvtph_ps(u_02_im, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][0][2][1]));

u_10_re = _mm512_mask_cvtph_ps(u_10_re, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][1][0][0]));

u_10_im = _mm512_mask_cvtph_ps(u_10_im, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][1][0][1]));

u_11_re = _mm512_mask_cvtph_ps(u_11_re, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][1][1][0]));

u_11_im = _mm512_mask_cvtph_ps(u_11_im, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][1][1][1]));

u_12_re = _mm512_mask_cvtph_ps(u_12_re, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][1][2][0]));

u_12_im = _mm512_mask_cvtph_ps(u_12_im, 0xFFFF, _mm256_load_si256((__m256i*)(*gBase)[7][1][2][1]));

u_20_re = _mm512_mul_ps( u_01_re , u_12_re );
u_20_re = _mm512_fnmadd_ps(u_01_im, u_12_im, u_20_re);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+192) ), _MM_HINT_T1);

u_20_re = _mm512_fnmadd_ps(u_02_re, u_11_re, u_20_re);
u_20_re = _mm512_fmadd_ps(u_02_im, u_11_im, u_20_re);
u_20_im = _mm512_mul_ps( u_02_re , u_11_im );
u_20_im = _mm512_fmadd_ps(u_02_im, u_11_re, u_20_im);
u_20_im = _mm512_fnmadd_ps(u_01_re, u_12_im, u_20_im);
u_20_im = _mm512_fnmadd_ps(u_01_im, u_12_re, u_20_im);
u_21_re = _mm512_mul_ps( u_02_re , u_10_re );
u_21_re = _mm512_fnmadd_ps(u_02_im, u_10_im, u_21_re);
u_21_re = _mm512_fnmadd_ps(u_00_re, u_12_re, u_21_re);
u_21_re = _mm512_fmadd_ps(u_00_im, u_12_im, u_21_re);
u_21_im = _mm512_mul_ps( u_00_re , u_12_im );
u_21_im = _mm512_fmadd_ps(u_00_im, u_12_re, u_21_im);
u_21_im = _mm512_fnmadd_ps(u_02_re, u_10_im, u_21_im);
u_21_im = _mm512_fnmadd_ps(u_02_im, u_10_re, u_21_im);
u_22_re = _mm512_mul_ps( u_00_re , u_11_re );
u_22_re = _mm512_fnmadd_ps(u_00_im, u_11_im, u_22_re);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+224) ), _MM_HINT_T1);

u_22_re = _mm512_fnmadd_ps(u_01_re, u_10_re, u_22_re);
u_22_re = _mm512_fmadd_ps(u_01_im, u_10_im, u_22_re);
u_22_im = _mm512_mul_ps( u_01_re , u_10_im );
u_22_im = _mm512_fmadd_ps(u_01_im, u_10_re, u_22_im);
u_22_im = _mm512_fnmadd_ps(u_00_re, u_11_im, u_22_im);
u_22_im = _mm512_fnmadd_ps(u_00_im, u_11_re, u_22_im);
ub_S0_C0_RE = _mm512_mul_ps( u_00_re , b_S0_C0_RE );
ub_S0_C0_RE = _mm512_fnmadd_ps(u_00_im, b_S0_C0_IM, ub_S0_C0_RE);
ub_S0_C0_IM = _mm512_mul_ps( u_00_re , b_S0_C0_IM );
ub_S0_C0_IM = _mm512_fmadd_ps(u_00_im, b_S0_C0_RE, ub_S0_C0_IM);
ub_S0_C0_RE = _mm512_fmadd_ps(u_10_re, b_S0_C1_RE, ub_S0_C0_RE);
ub_S0_C0_RE = _mm512_fnmadd_ps(u_10_im, b_S0_C1_IM, ub_S0_C0_RE);
ub_S0_C0_IM = _mm512_fmadd_ps(u_10_re, b_S0_C1_IM, ub_S0_C0_IM);
ub_S0_C0_IM = _mm512_fmadd_ps(u_10_im, b_S0_C1_RE, ub_S0_C0_IM);
ub_S0_C0_RE = _mm512_fmadd_ps(u_20_re, b_S0_C2_RE, ub_S0_C0_RE);
ub_S0_C0_RE = _mm512_fnmadd_ps(u_20_im, b_S0_C2_IM, ub_S0_C0_RE);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+256) ), _MM_HINT_T1);

ub_S0_C0_IM = _mm512_fmadd_ps(u_20_re, b_S0_C2_IM, ub_S0_C0_IM);
ub_S0_C0_IM = _mm512_fmadd_ps(u_20_im, b_S0_C2_RE, ub_S0_C0_IM);
ub_S0_C1_RE = _mm512_mul_ps( u_01_re , b_S0_C0_RE );
ub_S0_C1_RE = _mm512_fnmadd_ps(u_01_im, b_S0_C0_IM, ub_S0_C1_RE);
ub_S0_C1_IM = _mm512_mul_ps( u_01_re , b_S0_C0_IM );
ub_S0_C1_IM = _mm512_fmadd_ps(u_01_im, b_S0_C0_RE, ub_S0_C1_IM);
ub_S0_C1_RE = _mm512_fmadd_ps(u_11_re, b_S0_C1_RE, ub_S0_C1_RE);
ub_S0_C1_RE = _mm512_fnmadd_ps(u_11_im, b_S0_C1_IM, ub_S0_C1_RE);
ub_S0_C1_IM = _mm512_fmadd_ps(u_11_re, b_S0_C1_IM, ub_S0_C1_IM);
ub_S0_C1_IM = _mm512_fmadd_ps(u_11_im, b_S0_C1_RE, ub_S0_C1_IM);
ub_S0_C1_RE = _mm512_fmadd_ps(u_21_re, b_S0_C2_RE, ub_S0_C1_RE);
ub_S0_C1_RE = _mm512_fnmadd_ps(u_21_im, b_S0_C2_IM, ub_S0_C1_RE);
ub_S0_C1_IM = _mm512_fmadd_ps(u_21_re, b_S0_C2_IM, ub_S0_C1_IM);
ub_S0_C1_IM = _mm512_fmadd_ps(u_21_im, b_S0_C2_RE, ub_S0_C1_IM);
ub_S0_C2_RE = _mm512_mul_ps( u_02_re , b_S0_C0_RE );
ub_S0_C2_RE = _mm512_fnmadd_ps(u_02_im, b_S0_C0_IM, ub_S0_C2_RE);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+288) ), _MM_HINT_T1);

ub_S0_C2_IM = _mm512_mul_ps( u_02_re , b_S0_C0_IM );
ub_S0_C2_IM = _mm512_fmadd_ps(u_02_im, b_S0_C0_RE, ub_S0_C2_IM);
ub_S0_C2_RE = _mm512_fmadd_ps(u_12_re, b_S0_C1_RE, ub_S0_C2_RE);
ub_S0_C2_RE = _mm512_fnmadd_ps(u_12_im, b_S0_C1_IM, ub_S0_C2_RE);
ub_S0_C2_IM = _mm512_fmadd_ps(u_12_re, b_S0_C1_IM, ub_S0_C2_IM);
ub_S0_C2_IM = _mm512_fmadd_ps(u_12_im, b_S0_C1_RE, ub_S0_C2_IM);
ub_S0_C2_RE = _mm512_fmadd_ps(u_22_re, b_S0_C2_RE, ub_S0_C2_RE);
ub_S0_C2_RE = _mm512_fnmadd_ps(u_22_im, b_S0_C2_IM, ub_S0_C2_RE);
ub_S0_C2_IM = _mm512_fmadd_ps(u_22_re, b_S0_C2_IM, ub_S0_C2_IM);
ub_S0_C2_IM = _mm512_fmadd_ps(u_22_im, b_S0_C2_RE, ub_S0_C2_IM);
ub_S1_C0_RE = _mm512_mul_ps( u_00_re , b_S1_C0_RE );
ub_S1_C0_RE = _mm512_fnmadd_ps(u_00_im, b_S1_C0_IM, ub_S1_C0_RE);
ub_S1_C0_IM = _mm512_mul_ps( u_00_re , b_S1_C0_IM );
ub_S1_C0_IM = _mm512_fmadd_ps(u_00_im, b_S1_C0_RE, ub_S1_C0_IM);
ub_S1_C0_RE = _mm512_fmadd_ps(u_10_re, b_S1_C1_RE, ub_S1_C0_RE);
ub_S1_C0_RE = _mm512_fnmadd_ps(u_10_im, b_S1_C1_IM, ub_S1_C0_RE);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+320) ), _MM_HINT_T1);

ub_S1_C0_IM = _mm512_fmadd_ps(u_10_re, b_S1_C1_IM, ub_S1_C0_IM);
ub_S1_C0_IM = _mm512_fmadd_ps(u_10_im, b_S1_C1_RE, ub_S1_C0_IM);
ub_S1_C0_RE = _mm512_fmadd_ps(u_20_re, b_S1_C2_RE, ub_S1_C0_RE);
ub_S1_C0_RE = _mm512_fnmadd_ps(u_20_im, b_S1_C2_IM, ub_S1_C0_RE);
ub_S1_C0_IM = _mm512_fmadd_ps(u_20_re, b_S1_C2_IM, ub_S1_C0_IM);
ub_S1_C0_IM = _mm512_fmadd_ps(u_20_im, b_S1_C2_RE, ub_S1_C0_IM);
ub_S1_C1_RE = _mm512_mul_ps( u_01_re , b_S1_C0_RE );
ub_S1_C1_RE = _mm512_fnmadd_ps(u_01_im, b_S1_C0_IM, ub_S1_C1_RE);
ub_S1_C1_IM = _mm512_mul_ps( u_01_re , b_S1_C0_IM );
ub_S1_C1_IM = _mm512_fmadd_ps(u_01_im, b_S1_C0_RE, ub_S1_C1_IM);
ub_S1_C1_RE = _mm512_fmadd_ps(u_11_re, b_S1_C1_RE, ub_S1_C1_RE);
ub_S1_C1_RE = _mm512_fnmadd_ps(u_11_im, b_S1_C1_IM, ub_S1_C1_RE);
ub_S1_C1_IM = _mm512_fmadd_ps(u_11_re, b_S1_C1_IM, ub_S1_C1_IM);
ub_S1_C1_IM = _mm512_fmadd_ps(u_11_im, b_S1_C1_RE, ub_S1_C1_IM);
ub_S1_C1_RE = _mm512_fmadd_ps(u_21_re, b_S1_C2_RE, ub_S1_C1_RE);
ub_S1_C1_RE = _mm512_fnmadd_ps(u_21_im, b_S1_C2_IM, ub_S1_C1_RE);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+352) ), _MM_HINT_T1);

ub_S1_C1_IM = _mm512_fmadd_ps(u_21_re, b_S1_C2_IM, ub_S1_C1_IM);
ub_S1_C1_IM = _mm512_fmadd_ps(u_21_im, b_S1_C2_RE, ub_S1_C1_IM);
ub_S1_C2_RE = _mm512_mul_ps( u_02_re , b_S1_C0_RE );
ub_S1_C2_RE = _mm512_fnmadd_ps(u_02_im, b_S1_C0_IM, ub_S1_C2_RE);
ub_S1_C2_IM = _mm512_mul_ps( u_02_re , b_S1_C0_IM );
ub_S1_C2_IM = _mm512_fmadd_ps(u_02_im, b_S1_C0_RE, ub_S1_C2_IM);
ub_S1_C2_RE = _mm512_fmadd_ps(u_12_re, b_S1_C1_RE, ub_S1_C2_RE);
ub_S1_C2_RE = _mm512_fnmadd_ps(u_12_im, b_S1_C1_IM, ub_S1_C2_RE);
ub_S1_C2_IM = _mm512_fmadd_ps(u_12_re, b_S1_C1_IM, ub_S1_C2_IM);
ub_S1_C2_IM = _mm512_fmadd_ps(u_12_im, b_S1_C1_RE, ub_S1_C2_IM);
ub_S1_C2_RE = _mm512_fmadd_ps(u_22_re, b_S1_C2_RE, ub_S1_C2_RE);
ub_S1_C2_RE = _mm512_fnmadd_ps(u_22_im, b_S1_C2_IM, ub_S1_C2_RE);
ub_S1_C2_IM = _mm512_fmadd_ps(u_22_re, b_S1_C2_IM, ub_S1_C2_IM);
ub_S1_C2_IM = _mm512_fmadd_ps(u_22_im, b_S1_C2_RE, ub_S1_C2_IM);
dout_S0_C0_RE = _mm512_fmadd_ps(beta_vec, ub_S0_C0_RE, dout_S0_C0_RE);
dout_S0_C0_IM = _mm512_fmadd_ps(beta_vec, ub_S0_C0_IM, dout_S0_C0_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+384) ), _MM_HINT_T1);

dout_S0_C1_RE = _mm512_fmadd_ps(beta_vec, ub_S0_C1_RE, dout_S0_C1_RE);
dout_S0_C1_IM = _mm512_fmadd_ps(beta_vec, ub_S0_C1_IM, dout_S0_C1_IM);
dout_S0_C2_RE = _mm512_fmadd_ps(beta_vec, ub_S0_C2_RE, dout_S0_C2_RE);
dout_S0_C2_IM = _mm512_fmadd_ps(beta_vec, ub_S0_C2_IM, dout_S0_C2_IM);
dout_S2_C0_RE = _mm512_fnmadd_ps(beta_vec, ub_S0_C0_RE, dout_S2_C0_RE);
dout_S2_C0_IM = _mm512_fnmadd_ps(beta_vec, ub_S0_C0_IM, dout_S2_C0_IM);
dout_S2_C1_RE = _mm512_fnmadd_ps(beta_vec, ub_S0_C1_RE, dout_S2_C1_RE);
dout_S2_C1_IM = _mm512_fnmadd_ps(beta_vec, ub_S0_C1_IM, dout_S2_C1_IM);
dout_S2_C2_RE = _mm512_fnmadd_ps(beta_vec, ub_S0_C2_RE, dout_S2_C2_RE);
dout_S2_C2_IM = _mm512_fnmadd_ps(beta_vec, ub_S0_C2_IM, dout_S2_C2_IM);
dout_S1_C0_RE = _mm512_fmadd_ps(beta_vec, ub_S1_C0_RE, dout_S1_C0_RE);
dout_S1_C0_IM = _mm512_fmadd_ps(beta_vec, ub_S1_C0_IM, dout_S1_C0_IM);
dout_S1_C1_RE = _mm512_fmadd_ps(beta_vec, ub_S1_C1_RE, dout_S1_C1_RE);
dout_S1_C1_IM = _mm512_fmadd_ps(beta_vec, ub_S1_C1_IM, dout_S1_C1_IM);
dout_S1_C2_RE = _mm512_fmadd_ps(beta_vec, ub_S1_C2_RE, dout_S1_C2_RE);
dout_S1_C2_IM = _mm512_fmadd_ps(beta_vec, ub_S1_C2_IM, dout_S1_C2_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+416) ), _MM_HINT_T1);

dout_S3_C0_RE = _mm512_fnmadd_ps(beta_vec, ub_S1_C0_RE, dout_S3_C0_RE);
dout_S3_C0_IM = _mm512_fnmadd_ps(beta_vec, ub_S1_C0_IM, dout_S3_C0_IM);
dout_S3_C1_RE = _mm512_fnmadd_ps(beta_vec, ub_S1_C1_RE, dout_S3_C1_RE);
dout_S3_C1_IM = _mm512_fnmadd_ps(beta_vec, ub_S1_C1_IM, dout_S3_C1_IM);
dout_S3_C2_RE = _mm512_fnmadd_ps(beta_vec, ub_S1_C2_RE, dout_S3_C2_RE);
dout_S3_C2_IM = _mm512_fnmadd_ps(beta_vec, ub_S1_C2_IM, dout_S3_C2_IM);
 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+0) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+32) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+64) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+96) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+128) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+160) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+192) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+224) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+256) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+288) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+448) ), _MM_HINT_T1);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+320) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+352) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+384) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+416) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+448) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+480) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+512) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block1[0][0][0]+544) ), _MM_HINT_T0);

cl_full_00_RE = _mm512_mask_cvtph_ps(cl_full_00_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][0][0]));

cl_full_00_IM = _mm512_mask_cvtph_ps(cl_full_00_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][0][1]));

cl_full_01_RE = _mm512_mask_cvtph_ps(cl_full_01_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][1][0]));

cl_full_01_IM = _mm512_mask_cvtph_ps(cl_full_01_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][1][1]));

cl_full_02_RE = _mm512_mask_cvtph_ps(cl_full_02_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][2][0]));

cl_full_02_IM = _mm512_mask_cvtph_ps(cl_full_02_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][2][1]));

cl_full_03_RE = _mm512_mask_cvtph_ps(cl_full_03_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][3][0]));

cl_full_03_IM = _mm512_mask_cvtph_ps(cl_full_03_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][3][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+480) ), _MM_HINT_T1);

cl_full_04_RE = _mm512_mask_cvtph_ps(cl_full_04_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][4][0]));

cl_full_04_IM = _mm512_mask_cvtph_ps(cl_full_04_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][4][1]));

cl_full_05_RE = _mm512_mask_cvtph_ps(cl_full_05_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][5][0]));

cl_full_05_IM = _mm512_mask_cvtph_ps(cl_full_05_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[0][5][1]));

cl_full_10_RE = _mm512_mask_cvtph_ps(cl_full_10_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][0][0]));

cl_full_10_IM = _mm512_mask_cvtph_ps(cl_full_10_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][0][1]));

cl_full_11_RE = _mm512_mask_cvtph_ps(cl_full_11_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][1][0]));

cl_full_11_IM = _mm512_mask_cvtph_ps(cl_full_11_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][1][1]));

cl_full_12_RE = _mm512_mask_cvtph_ps(cl_full_12_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][2][0]));

cl_full_12_IM = _mm512_mask_cvtph_ps(cl_full_12_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][2][1]));

cl_full_13_RE = _mm512_mask_cvtph_ps(cl_full_13_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][3][0]));

cl_full_13_IM = _mm512_mask_cvtph_ps(cl_full_13_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][3][1]));

cl_full_14_RE = _mm512_mask_cvtph_ps(cl_full_14_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][4][0]));

cl_full_14_IM = _mm512_mask_cvtph_ps(cl_full_14_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][4][1]));

cl_full_15_RE = _mm512_mask_cvtph_ps(cl_full_15_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][5][0]));

cl_full_15_IM = _mm512_mask_cvtph_ps(cl_full_15_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[1][5][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+512) ), _MM_HINT_T1);

cl_full_20_RE = _mm512_mask_cvtph_ps(cl_full_20_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][0][0]));

cl_full_20_IM = _mm512_mask_cvtph_ps(cl_full_20_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][0][1]));

cl_full_21_RE = _mm512_mask_cvtph_ps(cl_full_21_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][1][0]));

cl_full_21_IM = _mm512_mask_cvtph_ps(cl_full_21_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][1][1]));

cl_full_22_RE = _mm512_mask_cvtph_ps(cl_full_22_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][2][0]));

cl_full_22_IM = _mm512_mask_cvtph_ps(cl_full_22_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][2][1]));

cl_full_23_RE = _mm512_mask_cvtph_ps(cl_full_23_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][3][0]));

cl_full_23_IM = _mm512_mask_cvtph_ps(cl_full_23_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][3][1]));

cl_full_24_RE = _mm512_mask_cvtph_ps(cl_full_24_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][4][0]));

cl_full_24_IM = _mm512_mask_cvtph_ps(cl_full_24_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][4][1]));

cl_full_25_RE = _mm512_mask_cvtph_ps(cl_full_25_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][5][0]));

cl_full_25_IM = _mm512_mask_cvtph_ps(cl_full_25_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[2][5][1]));

cl_full_30_RE = _mm512_mask_cvtph_ps(cl_full_30_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][0][0]));

cl_full_30_IM = _mm512_mask_cvtph_ps(cl_full_30_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][0][1]));

cl_full_31_RE = _mm512_mask_cvtph_ps(cl_full_31_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][1][0]));

cl_full_31_IM = _mm512_mask_cvtph_ps(cl_full_31_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][1][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+544) ), _MM_HINT_T1);

cl_full_32_RE = _mm512_mask_cvtph_ps(cl_full_32_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][2][0]));

cl_full_32_IM = _mm512_mask_cvtph_ps(cl_full_32_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][2][1]));

cl_full_33_RE = _mm512_mask_cvtph_ps(cl_full_33_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][3][0]));

cl_full_33_IM = _mm512_mask_cvtph_ps(cl_full_33_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][3][1]));

cl_full_34_RE = _mm512_mask_cvtph_ps(cl_full_34_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][4][0]));

cl_full_34_IM = _mm512_mask_cvtph_ps(cl_full_34_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][4][1]));

cl_full_35_RE = _mm512_mask_cvtph_ps(cl_full_35_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][5][0]));

cl_full_35_IM = _mm512_mask_cvtph_ps(cl_full_35_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[3][5][1]));

cl_full_40_RE = _mm512_mask_cvtph_ps(cl_full_40_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][0][0]));

cl_full_40_IM = _mm512_mask_cvtph_ps(cl_full_40_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][0][1]));

cl_full_41_RE = _mm512_mask_cvtph_ps(cl_full_41_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][1][0]));

cl_full_41_IM = _mm512_mask_cvtph_ps(cl_full_41_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][1][1]));

cl_full_42_RE = _mm512_mask_cvtph_ps(cl_full_42_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][2][0]));

cl_full_42_IM = _mm512_mask_cvtph_ps(cl_full_42_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][2][1]));

cl_full_43_RE = _mm512_mask_cvtph_ps(cl_full_43_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][3][0]));

cl_full_43_IM = _mm512_mask_cvtph_ps(cl_full_43_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][3][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+576) ), _MM_HINT_T1);

cl_full_44_RE = _mm512_mask_cvtph_ps(cl_full_44_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][4][0]));

cl_full_44_IM = _mm512_mask_cvtph_ps(cl_full_44_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][4][1]));

cl_full_45_RE = _mm512_mask_cvtph_ps(cl_full_45_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][5][0]));

cl_full_45_IM = _mm512_mask_cvtph_ps(cl_full_45_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[4][5][1]));

cl_full_50_RE = _mm512_mask_cvtph_ps(cl_full_50_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][0][0]));

cl_full_50_IM = _mm512_mask_cvtph_ps(cl_full_50_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][0][1]));

cl_full_51_RE = _mm512_mask_cvtph_ps(cl_full_51_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][1][0]));

cl_full_51_IM = _mm512_mask_cvtph_ps(cl_full_51_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][1][1]));

cl_full_52_RE = _mm512_mask_cvtph_ps(cl_full_52_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][2][0]));

cl_full_52_IM = _mm512_mask_cvtph_ps(cl_full_52_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][2][1]));

cl_full_53_RE = _mm512_mask_cvtph_ps(cl_full_53_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][3][0]));

cl_full_53_IM = _mm512_mask_cvtph_ps(cl_full_53_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][3][1]));

cl_full_54_RE = _mm512_mask_cvtph_ps(cl_full_54_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][4][0]));

cl_full_54_IM = _mm512_mask_cvtph_ps(cl_full_54_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][4][1]));

cl_full_55_RE = _mm512_mask_cvtph_ps(cl_full_55_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][5][0]));

cl_full_55_IM = _mm512_mask_cvtph_ps(cl_full_55_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block1[5][5][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+608) ), _MM_HINT_T1);

out_S0_C0_RE = _mm512_fmadd_ps(cl_full_00_RE, dout_S0_C0_RE, out_S0_C0_RE);
out_S0_C0_RE = _mm512_fnmadd_ps(cl_full_00_IM, dout_S0_C0_IM, out_S0_C0_RE);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_00_RE, dout_S0_C0_IM, out_S0_C0_IM);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_00_IM, dout_S0_C0_RE, out_S0_C0_IM);
out_S0_C0_RE = _mm512_fmadd_ps(cl_full_01_RE, dout_S0_C1_RE, out_S0_C0_RE);
out_S0_C0_RE = _mm512_fnmadd_ps(cl_full_01_IM, dout_S0_C1_IM, out_S0_C0_RE);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_01_RE, dout_S0_C1_IM, out_S0_C0_IM);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_01_IM, dout_S0_C1_RE, out_S0_C0_IM);
out_S0_C0_RE = _mm512_fmadd_ps(cl_full_02_RE, dout_S0_C2_RE, out_S0_C0_RE);
out_S0_C0_RE = _mm512_fnmadd_ps(cl_full_02_IM, dout_S0_C2_IM, out_S0_C0_RE);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_02_RE, dout_S0_C2_IM, out_S0_C0_IM);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_02_IM, dout_S0_C2_RE, out_S0_C0_IM);
out_S0_C0_RE = _mm512_fmadd_ps(cl_full_03_RE, dout_S1_C0_RE, out_S0_C0_RE);
out_S0_C0_RE = _mm512_fnmadd_ps(cl_full_03_IM, dout_S1_C0_IM, out_S0_C0_RE);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_03_RE, dout_S1_C0_IM, out_S0_C0_IM);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_03_IM, dout_S1_C0_RE, out_S0_C0_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+640) ), _MM_HINT_T1);

out_S0_C0_RE = _mm512_fmadd_ps(cl_full_04_RE, dout_S1_C1_RE, out_S0_C0_RE);
out_S0_C0_RE = _mm512_fnmadd_ps(cl_full_04_IM, dout_S1_C1_IM, out_S0_C0_RE);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_04_RE, dout_S1_C1_IM, out_S0_C0_IM);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_04_IM, dout_S1_C1_RE, out_S0_C0_IM);
out_S0_C0_RE = _mm512_fmadd_ps(cl_full_05_RE, dout_S1_C2_RE, out_S0_C0_RE);
out_S0_C0_RE = _mm512_fnmadd_ps(cl_full_05_IM, dout_S1_C2_IM, out_S0_C0_RE);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_05_RE, dout_S1_C2_IM, out_S0_C0_IM);
out_S0_C0_IM = _mm512_fmadd_ps(cl_full_05_IM, dout_S1_C2_RE, out_S0_C0_IM);
out_S0_C1_RE = _mm512_fmadd_ps(cl_full_10_RE, dout_S0_C0_RE, out_S0_C1_RE);
out_S0_C1_RE = _mm512_fnmadd_ps(cl_full_10_IM, dout_S0_C0_IM, out_S0_C1_RE);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_10_RE, dout_S0_C0_IM, out_S0_C1_IM);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_10_IM, dout_S0_C0_RE, out_S0_C1_IM);
out_S0_C1_RE = _mm512_fmadd_ps(cl_full_11_RE, dout_S0_C1_RE, out_S0_C1_RE);
out_S0_C1_RE = _mm512_fnmadd_ps(cl_full_11_IM, dout_S0_C1_IM, out_S0_C1_RE);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_11_RE, dout_S0_C1_IM, out_S0_C1_IM);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_11_IM, dout_S0_C1_RE, out_S0_C1_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+672) ), _MM_HINT_T1);

out_S0_C1_RE = _mm512_fmadd_ps(cl_full_12_RE, dout_S0_C2_RE, out_S0_C1_RE);
out_S0_C1_RE = _mm512_fnmadd_ps(cl_full_12_IM, dout_S0_C2_IM, out_S0_C1_RE);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_12_RE, dout_S0_C2_IM, out_S0_C1_IM);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_12_IM, dout_S0_C2_RE, out_S0_C1_IM);
out_S0_C1_RE = _mm512_fmadd_ps(cl_full_13_RE, dout_S1_C0_RE, out_S0_C1_RE);
out_S0_C1_RE = _mm512_fnmadd_ps(cl_full_13_IM, dout_S1_C0_IM, out_S0_C1_RE);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_13_RE, dout_S1_C0_IM, out_S0_C1_IM);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_13_IM, dout_S1_C0_RE, out_S0_C1_IM);
out_S0_C1_RE = _mm512_fmadd_ps(cl_full_14_RE, dout_S1_C1_RE, out_S0_C1_RE);
out_S0_C1_RE = _mm512_fnmadd_ps(cl_full_14_IM, dout_S1_C1_IM, out_S0_C1_RE);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_14_RE, dout_S1_C1_IM, out_S0_C1_IM);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_14_IM, dout_S1_C1_RE, out_S0_C1_IM);
out_S0_C1_RE = _mm512_fmadd_ps(cl_full_15_RE, dout_S1_C2_RE, out_S0_C1_RE);
out_S0_C1_RE = _mm512_fnmadd_ps(cl_full_15_IM, dout_S1_C2_IM, out_S0_C1_RE);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_15_RE, dout_S1_C2_IM, out_S0_C1_IM);
out_S0_C1_IM = _mm512_fmadd_ps(cl_full_15_IM, dout_S1_C2_RE, out_S0_C1_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+704) ), _MM_HINT_T1);

out_S0_C2_RE = _mm512_fmadd_ps(cl_full_20_RE, dout_S0_C0_RE, out_S0_C2_RE);
out_S0_C2_RE = _mm512_fnmadd_ps(cl_full_20_IM, dout_S0_C0_IM, out_S0_C2_RE);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_20_RE, dout_S0_C0_IM, out_S0_C2_IM);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_20_IM, dout_S0_C0_RE, out_S0_C2_IM);
out_S0_C2_RE = _mm512_fmadd_ps(cl_full_21_RE, dout_S0_C1_RE, out_S0_C2_RE);
out_S0_C2_RE = _mm512_fnmadd_ps(cl_full_21_IM, dout_S0_C1_IM, out_S0_C2_RE);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_21_RE, dout_S0_C1_IM, out_S0_C2_IM);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_21_IM, dout_S0_C1_RE, out_S0_C2_IM);
out_S0_C2_RE = _mm512_fmadd_ps(cl_full_22_RE, dout_S0_C2_RE, out_S0_C2_RE);
out_S0_C2_RE = _mm512_fnmadd_ps(cl_full_22_IM, dout_S0_C2_IM, out_S0_C2_RE);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_22_RE, dout_S0_C2_IM, out_S0_C2_IM);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_22_IM, dout_S0_C2_RE, out_S0_C2_IM);
out_S0_C2_RE = _mm512_fmadd_ps(cl_full_23_RE, dout_S1_C0_RE, out_S0_C2_RE);
out_S0_C2_RE = _mm512_fnmadd_ps(cl_full_23_IM, dout_S1_C0_IM, out_S0_C2_RE);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_23_RE, dout_S1_C0_IM, out_S0_C2_IM);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_23_IM, dout_S1_C0_RE, out_S0_C2_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+736) ), _MM_HINT_T1);

out_S0_C2_RE = _mm512_fmadd_ps(cl_full_24_RE, dout_S1_C1_RE, out_S0_C2_RE);
out_S0_C2_RE = _mm512_fnmadd_ps(cl_full_24_IM, dout_S1_C1_IM, out_S0_C2_RE);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_24_RE, dout_S1_C1_IM, out_S0_C2_IM);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_24_IM, dout_S1_C1_RE, out_S0_C2_IM);
out_S0_C2_RE = _mm512_fmadd_ps(cl_full_25_RE, dout_S1_C2_RE, out_S0_C2_RE);
out_S0_C2_RE = _mm512_fnmadd_ps(cl_full_25_IM, dout_S1_C2_IM, out_S0_C2_RE);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_25_RE, dout_S1_C2_IM, out_S0_C2_IM);
out_S0_C2_IM = _mm512_fmadd_ps(cl_full_25_IM, dout_S1_C2_RE, out_S0_C2_IM);
out_S1_C0_RE = _mm512_fmadd_ps(cl_full_30_RE, dout_S0_C0_RE, out_S1_C0_RE);
out_S1_C0_RE = _mm512_fnmadd_ps(cl_full_30_IM, dout_S0_C0_IM, out_S1_C0_RE);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_30_RE, dout_S0_C0_IM, out_S1_C0_IM);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_30_IM, dout_S0_C0_RE, out_S1_C0_IM);
out_S1_C0_RE = _mm512_fmadd_ps(cl_full_31_RE, dout_S0_C1_RE, out_S1_C0_RE);
out_S1_C0_RE = _mm512_fnmadd_ps(cl_full_31_IM, dout_S0_C1_IM, out_S1_C0_RE);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_31_RE, dout_S0_C1_IM, out_S1_C0_IM);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_31_IM, dout_S0_C1_RE, out_S1_C0_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+768) ), _MM_HINT_T1);

out_S1_C0_RE = _mm512_fmadd_ps(cl_full_32_RE, dout_S0_C2_RE, out_S1_C0_RE);
out_S1_C0_RE = _mm512_fnmadd_ps(cl_full_32_IM, dout_S0_C2_IM, out_S1_C0_RE);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_32_RE, dout_S0_C2_IM, out_S1_C0_IM);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_32_IM, dout_S0_C2_RE, out_S1_C0_IM);
out_S1_C0_RE = _mm512_fmadd_ps(cl_full_33_RE, dout_S1_C0_RE, out_S1_C0_RE);
out_S1_C0_RE = _mm512_fnmadd_ps(cl_full_33_IM, dout_S1_C0_IM, out_S1_C0_RE);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_33_RE, dout_S1_C0_IM, out_S1_C0_IM);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_33_IM, dout_S1_C0_RE, out_S1_C0_IM);
out_S1_C0_RE = _mm512_fmadd_ps(cl_full_34_RE, dout_S1_C1_RE, out_S1_C0_RE);
out_S1_C0_RE = _mm512_fnmadd_ps(cl_full_34_IM, dout_S1_C1_IM, out_S1_C0_RE);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_34_RE, dout_S1_C1_IM, out_S1_C0_IM);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_34_IM, dout_S1_C1_RE, out_S1_C0_IM);
out_S1_C0_RE = _mm512_fmadd_ps(cl_full_35_RE, dout_S1_C2_RE, out_S1_C0_RE);
out_S1_C0_RE = _mm512_fnmadd_ps(cl_full_35_IM, dout_S1_C2_IM, out_S1_C0_RE);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_35_RE, dout_S1_C2_IM, out_S1_C0_IM);
out_S1_C0_IM = _mm512_fmadd_ps(cl_full_35_IM, dout_S1_C2_RE, out_S1_C0_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+800) ), _MM_HINT_T1);

out_S1_C1_RE = _mm512_fmadd_ps(cl_full_40_RE, dout_S0_C0_RE, out_S1_C1_RE);
out_S1_C1_RE = _mm512_fnmadd_ps(cl_full_40_IM, dout_S0_C0_IM, out_S1_C1_RE);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_40_RE, dout_S0_C0_IM, out_S1_C1_IM);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_40_IM, dout_S0_C0_RE, out_S1_C1_IM);
out_S1_C1_RE = _mm512_fmadd_ps(cl_full_41_RE, dout_S0_C1_RE, out_S1_C1_RE);
out_S1_C1_RE = _mm512_fnmadd_ps(cl_full_41_IM, dout_S0_C1_IM, out_S1_C1_RE);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_41_RE, dout_S0_C1_IM, out_S1_C1_IM);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_41_IM, dout_S0_C1_RE, out_S1_C1_IM);
out_S1_C1_RE = _mm512_fmadd_ps(cl_full_42_RE, dout_S0_C2_RE, out_S1_C1_RE);
out_S1_C1_RE = _mm512_fnmadd_ps(cl_full_42_IM, dout_S0_C2_IM, out_S1_C1_RE);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_42_RE, dout_S0_C2_IM, out_S1_C1_IM);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_42_IM, dout_S0_C2_RE, out_S1_C1_IM);
out_S1_C1_RE = _mm512_fmadd_ps(cl_full_43_RE, dout_S1_C0_RE, out_S1_C1_RE);
out_S1_C1_RE = _mm512_fnmadd_ps(cl_full_43_IM, dout_S1_C0_IM, out_S1_C1_RE);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_43_RE, dout_S1_C0_IM, out_S1_C1_IM);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_43_IM, dout_S1_C0_RE, out_S1_C1_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+832) ), _MM_HINT_T1);

out_S1_C1_RE = _mm512_fmadd_ps(cl_full_44_RE, dout_S1_C1_RE, out_S1_C1_RE);
out_S1_C1_RE = _mm512_fnmadd_ps(cl_full_44_IM, dout_S1_C1_IM, out_S1_C1_RE);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_44_RE, dout_S1_C1_IM, out_S1_C1_IM);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_44_IM, dout_S1_C1_RE, out_S1_C1_IM);
out_S1_C1_RE = _mm512_fmadd_ps(cl_full_45_RE, dout_S1_C2_RE, out_S1_C1_RE);
out_S1_C1_RE = _mm512_fnmadd_ps(cl_full_45_IM, dout_S1_C2_IM, out_S1_C1_RE);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_45_RE, dout_S1_C2_IM, out_S1_C1_IM);
out_S1_C1_IM = _mm512_fmadd_ps(cl_full_45_IM, dout_S1_C2_RE, out_S1_C1_IM);
out_S1_C2_RE = _mm512_fmadd_ps(cl_full_50_RE, dout_S0_C0_RE, out_S1_C2_RE);
out_S1_C2_RE = _mm512_fnmadd_ps(cl_full_50_IM, dout_S0_C0_IM, out_S1_C2_RE);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_50_RE, dout_S0_C0_IM, out_S1_C2_IM);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_50_IM, dout_S0_C0_RE, out_S1_C2_IM);
out_S1_C2_RE = _mm512_fmadd_ps(cl_full_51_RE, dout_S0_C1_RE, out_S1_C2_RE);
out_S1_C2_RE = _mm512_fnmadd_ps(cl_full_51_IM, dout_S0_C1_IM, out_S1_C2_RE);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_51_RE, dout_S0_C1_IM, out_S1_C2_IM);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_51_IM, dout_S0_C1_RE, out_S1_C2_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+864) ), _MM_HINT_T1);

out_S1_C2_RE = _mm512_fmadd_ps(cl_full_52_RE, dout_S0_C2_RE, out_S1_C2_RE);
out_S1_C2_RE = _mm512_fnmadd_ps(cl_full_52_IM, dout_S0_C2_IM, out_S1_C2_RE);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_52_RE, dout_S0_C2_IM, out_S1_C2_IM);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_52_IM, dout_S0_C2_RE, out_S1_C2_IM);
out_S1_C2_RE = _mm512_fmadd_ps(cl_full_53_RE, dout_S1_C0_RE, out_S1_C2_RE);
out_S1_C2_RE = _mm512_fnmadd_ps(cl_full_53_IM, dout_S1_C0_IM, out_S1_C2_RE);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_53_RE, dout_S1_C0_IM, out_S1_C2_IM);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_53_IM, dout_S1_C0_RE, out_S1_C2_IM);
out_S1_C2_RE = _mm512_fmadd_ps(cl_full_54_RE, dout_S1_C1_RE, out_S1_C2_RE);
out_S1_C2_RE = _mm512_fnmadd_ps(cl_full_54_IM, dout_S1_C1_IM, out_S1_C2_RE);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_54_RE, dout_S1_C1_IM, out_S1_C2_IM);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_54_IM, dout_S1_C1_RE, out_S1_C2_IM);
out_S1_C2_RE = _mm512_fmadd_ps(cl_full_55_RE, dout_S1_C2_RE, out_S1_C2_RE);
out_S1_C2_RE = _mm512_fnmadd_ps(cl_full_55_IM, dout_S1_C2_IM, out_S1_C2_RE);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_55_RE, dout_S1_C2_IM, out_S1_C2_IM);
out_S1_C2_IM = _mm512_fmadd_ps(cl_full_55_IM, dout_S1_C2_RE, out_S1_C2_IM);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+896) ), _MM_HINT_T1);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+0) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+32) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+64) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+96) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+128) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+160) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+192) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+224) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+256) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+288) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+320) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+352) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+384) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+416) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+448) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+480) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+928) ), _MM_HINT_T1);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+512) ), _MM_HINT_T0);

 _mm_prefetch((const char *)( ((*clBase).block2[0][0][0]+544) ), _MM_HINT_T0);

cl_full_00_RE = _mm512_mask_cvtph_ps(cl_full_00_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][0][0]));

cl_full_00_IM = _mm512_mask_cvtph_ps(cl_full_00_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][0][1]));

cl_full_01_RE = _mm512_mask_cvtph_ps(cl_full_01_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][1][0]));

cl_full_01_IM = _mm512_mask_cvtph_ps(cl_full_01_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][1][1]));

cl_full_02_RE = _mm512_mask_cvtph_ps(cl_full_02_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][2][0]));

cl_full_02_IM = _mm512_mask_cvtph_ps(cl_full_02_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][2][1]));

cl_full_03_RE = _mm512_mask_cvtph_ps(cl_full_03_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][3][0]));

cl_full_03_IM = _mm512_mask_cvtph_ps(cl_full_03_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][3][1]));

cl_full_04_RE = _mm512_mask_cvtph_ps(cl_full_04_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][4][0]));

cl_full_04_IM = _mm512_mask_cvtph_ps(cl_full_04_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][4][1]));

cl_full_05_RE = _mm512_mask_cvtph_ps(cl_full_05_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][5][0]));

cl_full_05_IM = _mm512_mask_cvtph_ps(cl_full_05_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[0][5][1]));

cl_full_10_RE = _mm512_mask_cvtph_ps(cl_full_10_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][0][0]));

cl_full_10_IM = _mm512_mask_cvtph_ps(cl_full_10_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][0][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+960) ), _MM_HINT_T1);

cl_full_11_RE = _mm512_mask_cvtph_ps(cl_full_11_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][1][0]));

cl_full_11_IM = _mm512_mask_cvtph_ps(cl_full_11_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][1][1]));

cl_full_12_RE = _mm512_mask_cvtph_ps(cl_full_12_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][2][0]));

cl_full_12_IM = _mm512_mask_cvtph_ps(cl_full_12_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][2][1]));

cl_full_13_RE = _mm512_mask_cvtph_ps(cl_full_13_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][3][0]));

cl_full_13_IM = _mm512_mask_cvtph_ps(cl_full_13_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][3][1]));

cl_full_14_RE = _mm512_mask_cvtph_ps(cl_full_14_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][4][0]));

cl_full_14_IM = _mm512_mask_cvtph_ps(cl_full_14_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][4][1]));

cl_full_15_RE = _mm512_mask_cvtph_ps(cl_full_15_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][5][0]));

cl_full_15_IM = _mm512_mask_cvtph_ps(cl_full_15_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[1][5][1]));

cl_full_20_RE = _mm512_mask_cvtph_ps(cl_full_20_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][0][0]));

cl_full_20_IM = _mm512_mask_cvtph_ps(cl_full_20_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][0][1]));

cl_full_21_RE = _mm512_mask_cvtph_ps(cl_full_21_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][1][0]));

cl_full_21_IM = _mm512_mask_cvtph_ps(cl_full_21_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][1][1]));

cl_full_22_RE = _mm512_mask_cvtph_ps(cl_full_22_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][2][0]));

cl_full_22_IM = _mm512_mask_cvtph_ps(cl_full_22_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][2][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+992) ), _MM_HINT_T1);

cl_full_23_RE = _mm512_mask_cvtph_ps(cl_full_23_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][3][0]));

cl_full_23_IM = _mm512_mask_cvtph_ps(cl_full_23_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][3][1]));

cl_full_24_RE = _mm512_mask_cvtph_ps(cl_full_24_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][4][0]));

cl_full_24_IM = _mm512_mask_cvtph_ps(cl_full_24_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][4][1]));

cl_full_25_RE = _mm512_mask_cvtph_ps(cl_full_25_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][5][0]));

cl_full_25_IM = _mm512_mask_cvtph_ps(cl_full_25_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[2][5][1]));

cl_full_30_RE = _mm512_mask_cvtph_ps(cl_full_30_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][0][0]));

cl_full_30_IM = _mm512_mask_cvtph_ps(cl_full_30_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][0][1]));

cl_full_31_RE = _mm512_mask_cvtph_ps(cl_full_31_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][1][0]));

cl_full_31_IM = _mm512_mask_cvtph_ps(cl_full_31_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][1][1]));

cl_full_32_RE = _mm512_mask_cvtph_ps(cl_full_32_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][2][0]));

cl_full_32_IM = _mm512_mask_cvtph_ps(cl_full_32_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][2][1]));

cl_full_33_RE = _mm512_mask_cvtph_ps(cl_full_33_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][3][0]));

cl_full_33_IM = _mm512_mask_cvtph_ps(cl_full_33_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][3][1]));

cl_full_34_RE = _mm512_mask_cvtph_ps(cl_full_34_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][4][0]));

cl_full_34_IM = _mm512_mask_cvtph_ps(cl_full_34_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][4][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+1024) ), _MM_HINT_T1);

cl_full_35_RE = _mm512_mask_cvtph_ps(cl_full_35_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][5][0]));

cl_full_35_IM = _mm512_mask_cvtph_ps(cl_full_35_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[3][5][1]));

cl_full_40_RE = _mm512_mask_cvtph_ps(cl_full_40_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][0][0]));

cl_full_40_IM = _mm512_mask_cvtph_ps(cl_full_40_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][0][1]));

cl_full_41_RE = _mm512_mask_cvtph_ps(cl_full_41_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][1][0]));

cl_full_41_IM = _mm512_mask_cvtph_ps(cl_full_41_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][1][1]));

cl_full_42_RE = _mm512_mask_cvtph_ps(cl_full_42_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][2][0]));

cl_full_42_IM = _mm512_mask_cvtph_ps(cl_full_42_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][2][1]));

cl_full_43_RE = _mm512_mask_cvtph_ps(cl_full_43_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][3][0]));

cl_full_43_IM = _mm512_mask_cvtph_ps(cl_full_43_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][3][1]));

cl_full_44_RE = _mm512_mask_cvtph_ps(cl_full_44_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][4][0]));

cl_full_44_IM = _mm512_mask_cvtph_ps(cl_full_44_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][4][1]));

cl_full_45_RE = _mm512_mask_cvtph_ps(cl_full_45_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][5][0]));

cl_full_45_IM = _mm512_mask_cvtph_ps(cl_full_45_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[4][5][1]));

cl_full_50_RE = _mm512_mask_cvtph_ps(cl_full_50_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][0][0]));

cl_full_50_IM = _mm512_mask_cvtph_ps(cl_full_50_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][0][1]));

 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+1056) ), _MM_HINT_T1);

cl_full_51_RE = _mm512_mask_cvtph_ps(cl_full_51_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][1][0]));

cl_full_51_IM = _mm512_mask_cvtph_ps(cl_full_51_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][1][1]));

cl_full_52_RE = _mm512_mask_cvtph_ps(cl_full_52_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][2][0]));

cl_full_52_IM = _mm512_mask_cvtph_ps(cl_full_52_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][2][1]));

cl_full_53_RE = _mm512_mask_cvtph_ps(cl_full_53_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][3][0]));

cl_full_53_IM = _mm512_mask_cvtph_ps(cl_full_53_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][3][1]));

cl_full_54_RE = _mm512_mask_cvtph_ps(cl_full_54_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][4][0]));

cl_full_54_IM = _mm512_mask_cvtph_ps(cl_full_54_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][4][1]));

cl_full_55_RE = _mm512_mask_cvtph_ps(cl_full_55_RE, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][5][0]));

cl_full_55_IM = _mm512_mask_cvtph_ps(cl_full_55_IM, 0xFFFF, _mm256_load_si256((__m256i*)(*clBase).block2[5][5][1]));

out_S2_C0_RE = _mm512_fmadd_ps(cl_full_00_RE, dout_S2_C0_RE, out_S2_C0_RE);
out_S2_C0_RE = _mm512_fnmadd_ps(cl_full_00_IM, dout_S2_C0_IM, out_S2_C0_RE);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_00_RE, dout_S2_C0_IM, out_S2_C0_IM);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_00_IM, dout_S2_C0_RE, out_S2_C0_IM);
out_S2_C0_RE = _mm512_fmadd_ps(cl_full_01_RE, dout_S2_C1_RE, out_S2_C0_RE);
out_S2_C0_RE = _mm512_fnmadd_ps(cl_full_01_IM, dout_S2_C1_IM, out_S2_C0_RE);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+1088) ), _MM_HINT_T1);

out_S2_C0_IM = _mm512_fmadd_ps(cl_full_01_RE, dout_S2_C1_IM, out_S2_C0_IM);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_01_IM, dout_S2_C1_RE, out_S2_C0_IM);
out_S2_C0_RE = _mm512_fmadd_ps(cl_full_02_RE, dout_S2_C2_RE, out_S2_C0_RE);
out_S2_C0_RE = _mm512_fnmadd_ps(cl_full_02_IM, dout_S2_C2_IM, out_S2_C0_RE);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_02_RE, dout_S2_C2_IM, out_S2_C0_IM);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_02_IM, dout_S2_C2_RE, out_S2_C0_IM);
out_S2_C0_RE = _mm512_fmadd_ps(cl_full_03_RE, dout_S3_C0_RE, out_S2_C0_RE);
out_S2_C0_RE = _mm512_fnmadd_ps(cl_full_03_IM, dout_S3_C0_IM, out_S2_C0_RE);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_03_RE, dout_S3_C0_IM, out_S2_C0_IM);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_03_IM, dout_S3_C0_RE, out_S2_C0_IM);
out_S2_C0_RE = _mm512_fmadd_ps(cl_full_04_RE, dout_S3_C1_RE, out_S2_C0_RE);
out_S2_C0_RE = _mm512_fnmadd_ps(cl_full_04_IM, dout_S3_C1_IM, out_S2_C0_RE);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_04_RE, dout_S3_C1_IM, out_S2_C0_IM);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_04_IM, dout_S3_C1_RE, out_S2_C0_IM);
out_S2_C0_RE = _mm512_fmadd_ps(cl_full_05_RE, dout_S3_C2_RE, out_S2_C0_RE);
out_S2_C0_RE = _mm512_fnmadd_ps(cl_full_05_IM, dout_S3_C2_IM, out_S2_C0_RE);
 _mm_prefetch((const char *)( (((*clBase).block1[0][0][0] + clprefdist)+1120) ), _MM_HINT_T1);

out_S2_C0_IM = _mm512_fmadd_ps(cl_full_05_RE, dout_S3_C2_IM, out_S2_C0_IM);
out_S2_C0_IM = _mm512_fmadd_ps(cl_full_05_IM, dout_S3_C2_RE, out_S2_C0_IM);
out_S2_C1_RE = _mm512_fmadd_ps(cl_full_10_RE, dout_S2_C0_RE, out_S2_C1_RE);
out_S2_C1_RE = _mm512_fnmadd_ps(cl_full_10_IM, dout_S2_C0_IM, out_S2_C1_RE);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_10_RE, dout_S2_C0_IM, out_S2_C1_IM);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_10_IM, dout_S2_C0_RE, out_S2_C1_IM);
out_S2_C1_RE = _mm512_fmadd_ps(cl_full_11_RE, dout_S2_C1_RE, out_S2_C1_RE);
out_S2_C1_RE = _mm512_fnmadd_ps(cl_full_11_IM, dout_S2_C1_IM, out_S2_C1_RE);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_11_RE, dout_S2_C1_IM, out_S2_C1_IM);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_11_IM, dout_S2_C1_RE, out_S2_C1_IM);
out_S2_C1_RE = _mm512_fmadd_ps(cl_full_12_RE, dout_S2_C2_RE, out_S2_C1_RE);
out_S2_C1_RE = _mm512_fnmadd_ps(cl_full_12_IM, dout_S2_C2_IM, out_S2_C1_RE);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_12_RE, dout_S2_C2_IM, out_S2_C1_IM);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_12_IM, dout_S2_C2_RE, out_S2_C1_IM);
out_S2_C1_RE = _mm512_fmadd_ps(cl_full_13_RE, dout_S3_C0_RE, out_S2_C1_RE);
out_S2_C1_RE = _mm512_fnmadd_ps(cl_full_13_IM, dout_S3_C0_IM, out_S2_C1_RE);
 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+0) + offs[0]) ), _MM_HINT_T1);

out_S2_C1_IM = _mm512_fmadd_ps(cl_full_13_RE, dout_S3_C0_IM, out_S2_C1_IM);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_13_IM, dout_S3_C0_RE, out_S2_C1_IM);
out_S2_C1_RE = _mm512_fmadd_ps(cl_full_14_RE, dout_S3_C1_RE, out_S2_C1_RE);
out_S2_C1_RE = _mm512_fnmadd_ps(cl_full_14_IM, dout_S3_C1_IM, out_S2_C1_RE);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_14_RE, dout_S3_C1_IM, out_S2_C1_IM);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_14_IM, dout_S3_C1_RE, out_S2_C1_IM);
out_S2_C1_RE = _mm512_fmadd_ps(cl_full_15_RE, dout_S3_C2_RE, out_S2_C1_RE);
out_S2_C1_RE = _mm512_fnmadd_ps(cl_full_15_IM, dout_S3_C2_IM, out_S2_C1_RE);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_15_RE, dout_S3_C2_IM, out_S2_C1_IM);
out_S2_C1_IM = _mm512_fmadd_ps(cl_full_15_IM, dout_S3_C2_RE, out_S2_C1_IM);
out_S2_C2_RE = _mm512_fmadd_ps(cl_full_20_RE, dout_S2_C0_RE, out_S2_C2_RE);
out_S2_C2_RE = _mm512_fnmadd_ps(cl_full_20_IM, dout_S2_C0_IM, out_S2_C2_RE);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_20_RE, dout_S2_C0_IM, out_S2_C2_IM);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_20_IM, dout_S2_C0_RE, out_S2_C2_IM);
out_S2_C2_RE = _mm512_fmadd_ps(cl_full_21_RE, dout_S2_C1_RE, out_S2_C2_RE);
out_S2_C2_RE = _mm512_fnmadd_ps(cl_full_21_IM, dout_S2_C1_IM, out_S2_C2_RE);
 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+0) + offs[4]) ), _MM_HINT_T1);

out_S2_C2_IM = _mm512_fmadd_ps(cl_full_21_RE, dout_S2_C1_IM, out_S2_C2_IM);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_21_IM, dout_S2_C1_RE, out_S2_C2_IM);
out_S2_C2_RE = _mm512_fmadd_ps(cl_full_22_RE, dout_S2_C2_RE, out_S2_C2_RE);
out_S2_C2_RE = _mm512_fnmadd_ps(cl_full_22_IM, dout_S2_C2_IM, out_S2_C2_RE);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_22_RE, dout_S2_C2_IM, out_S2_C2_IM);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_22_IM, dout_S2_C2_RE, out_S2_C2_IM);
out_S2_C2_RE = _mm512_fmadd_ps(cl_full_23_RE, dout_S3_C0_RE, out_S2_C2_RE);
out_S2_C2_RE = _mm512_fnmadd_ps(cl_full_23_IM, dout_S3_C0_IM, out_S2_C2_RE);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_23_RE, dout_S3_C0_IM, out_S2_C2_IM);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_23_IM, dout_S3_C0_RE, out_S2_C2_IM);
out_S2_C2_RE = _mm512_fmadd_ps(cl_full_24_RE, dout_S3_C1_RE, out_S2_C2_RE);
out_S2_C2_RE = _mm512_fnmadd_ps(cl_full_24_IM, dout_S3_C1_IM, out_S2_C2_RE);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_24_RE, dout_S3_C1_IM, out_S2_C2_IM);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_24_IM, dout_S3_C1_RE, out_S2_C2_IM);
out_S2_C2_RE = _mm512_fmadd_ps(cl_full_25_RE, dout_S3_C2_RE, out_S2_C2_RE);
out_S2_C2_RE = _mm512_fnmadd_ps(cl_full_25_IM, dout_S3_C2_IM, out_S2_C2_RE);
 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+0) + offs[8]) ), _MM_HINT_T1);

out_S2_C2_IM = _mm512_fmadd_ps(cl_full_25_RE, dout_S3_C2_IM, out_S2_C2_IM);
out_S2_C2_IM = _mm512_fmadd_ps(cl_full_25_IM, dout_S3_C2_RE, out_S2_C2_IM);
out_S3_C0_RE = _mm512_fmadd_ps(cl_full_30_RE, dout_S2_C0_RE, out_S3_C0_RE);
out_S3_C0_RE = _mm512_fnmadd_ps(cl_full_30_IM, dout_S2_C0_IM, out_S3_C0_RE);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_30_RE, dout_S2_C0_IM, out_S3_C0_IM);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_30_IM, dout_S2_C0_RE, out_S3_C0_IM);
out_S3_C0_RE = _mm512_fmadd_ps(cl_full_31_RE, dout_S2_C1_RE, out_S3_C0_RE);
out_S3_C0_RE = _mm512_fnmadd_ps(cl_full_31_IM, dout_S2_C1_IM, out_S3_C0_RE);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_31_RE, dout_S2_C1_IM, out_S3_C0_IM);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_31_IM, dout_S2_C1_RE, out_S3_C0_IM);
out_S3_C0_RE = _mm512_fmadd_ps(cl_full_32_RE, dout_S2_C2_RE, out_S3_C0_RE);
out_S3_C0_RE = _mm512_fnmadd_ps(cl_full_32_IM, dout_S2_C2_IM, out_S3_C0_RE);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_32_RE, dout_S2_C2_IM, out_S3_C0_IM);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_32_IM, dout_S2_C2_RE, out_S3_C0_IM);
out_S3_C0_RE = _mm512_fmadd_ps(cl_full_33_RE, dout_S3_C0_RE, out_S3_C0_RE);
out_S3_C0_RE = _mm512_fnmadd_ps(cl_full_33_IM, dout_S3_C0_IM, out_S3_C0_RE);
 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+0) + offs[12]) ), _MM_HINT_T1);

out_S3_C0_IM = _mm512_fmadd_ps(cl_full_33_RE, dout_S3_C0_IM, out_S3_C0_IM);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_33_IM, dout_S3_C0_RE, out_S3_C0_IM);
out_S3_C0_RE = _mm512_fmadd_ps(cl_full_34_RE, dout_S3_C1_RE, out_S3_C0_RE);
out_S3_C0_RE = _mm512_fnmadd_ps(cl_full_34_IM, dout_S3_C1_IM, out_S3_C0_RE);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_34_RE, dout_S3_C1_IM, out_S3_C0_IM);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_34_IM, dout_S3_C1_RE, out_S3_C0_IM);
out_S3_C0_RE = _mm512_fmadd_ps(cl_full_35_RE, dout_S3_C2_RE, out_S3_C0_RE);
out_S3_C0_RE = _mm512_fnmadd_ps(cl_full_35_IM, dout_S3_C2_IM, out_S3_C0_RE);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_35_RE, dout_S3_C2_IM, out_S3_C0_IM);
out_S3_C0_IM = _mm512_fmadd_ps(cl_full_35_IM, dout_S3_C2_RE, out_S3_C0_IM);
out_S3_C1_RE = _mm512_fmadd_ps(cl_full_40_RE, dout_S2_C0_RE, out_S3_C1_RE);
out_S3_C1_RE = _mm512_fnmadd_ps(cl_full_40_IM, dout_S2_C0_IM, out_S3_C1_RE);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_40_RE, dout_S2_C0_IM, out_S3_C1_IM);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_40_IM, dout_S2_C0_RE, out_S3_C1_IM);
out_S3_C1_RE = _mm512_fmadd_ps(cl_full_41_RE, dout_S2_C1_RE, out_S3_C1_RE);
out_S3_C1_RE = _mm512_fnmadd_ps(cl_full_41_IM, dout_S2_C1_IM, out_S3_C1_RE);
 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+32) + offs[0]) ), _MM_HINT_T1);

out_S3_C1_IM = _mm512_fmadd_ps(cl_full_41_RE, dout_S2_C1_IM, out_S3_C1_IM);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_41_IM, dout_S2_C1_RE, out_S3_C1_IM);
out_S3_C1_RE = _mm512_fmadd_ps(cl_full_42_RE, dout_S2_C2_RE, out_S3_C1_RE);
out_S3_C1_RE = _mm512_fnmadd_ps(cl_full_42_IM, dout_S2_C2_IM, out_S3_C1_RE);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_42_RE, dout_S2_C2_IM, out_S3_C1_IM);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_42_IM, dout_S2_C2_RE, out_S3_C1_IM);
out_S3_C1_RE = _mm512_fmadd_ps(cl_full_43_RE, dout_S3_C0_RE, out_S3_C1_RE);
out_S3_C1_RE = _mm512_fnmadd_ps(cl_full_43_IM, dout_S3_C0_IM, out_S3_C1_RE);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_43_RE, dout_S3_C0_IM, out_S3_C1_IM);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_43_IM, dout_S3_C0_RE, out_S3_C1_IM);
out_S3_C1_RE = _mm512_fmadd_ps(cl_full_44_RE, dout_S3_C1_RE, out_S3_C1_RE);
out_S3_C1_RE = _mm512_fnmadd_ps(cl_full_44_IM, dout_S3_C1_IM, out_S3_C1_RE);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_44_RE, dout_S3_C1_IM, out_S3_C1_IM);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_44_IM, dout_S3_C1_RE, out_S3_C1_IM);
out_S3_C1_RE = _mm512_fmadd_ps(cl_full_45_RE, dout_S3_C2_RE, out_S3_C1_RE);
out_S3_C1_RE = _mm512_fnmadd_ps(cl_full_45_IM, dout_S3_C2_IM, out_S3_C1_RE);
 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+32) + offs[4]) ), _MM_HINT_T1);

out_S3_C1_IM = _mm512_fmadd_ps(cl_full_45_RE, dout_S3_C2_IM, out_S3_C1_IM);
out_S3_C1_IM = _mm512_fmadd_ps(cl_full_45_IM, dout_S3_C2_RE, out_S3_C1_IM);
out_S3_C2_RE = _mm512_fmadd_ps(cl_full_50_RE, dout_S2_C0_RE, out_S3_C2_RE);
out_S3_C2_RE = _mm512_fnmadd_ps(cl_full_50_IM, dout_S2_C0_IM, out_S3_C2_RE);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_50_RE, dout_S2_C0_IM, out_S3_C2_IM);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_50_IM, dout_S2_C0_RE, out_S3_C2_IM);
out_S3_C2_RE = _mm512_fmadd_ps(cl_full_51_RE, dout_S2_C1_RE, out_S3_C2_RE);
out_S3_C2_RE = _mm512_fnmadd_ps(cl_full_51_IM, dout_S2_C1_IM, out_S3_C2_RE);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_51_RE, dout_S2_C1_IM, out_S3_C2_IM);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_51_IM, dout_S2_C1_RE, out_S3_C2_IM);
out_S3_C2_RE = _mm512_fmadd_ps(cl_full_52_RE, dout_S2_C2_RE, out_S3_C2_RE);
out_S3_C2_RE = _mm512_fnmadd_ps(cl_full_52_IM, dout_S2_C2_IM, out_S3_C2_RE);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_52_RE, dout_S2_C2_IM, out_S3_C2_IM);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_52_IM, dout_S2_C2_RE, out_S3_C2_IM);
out_S3_C2_RE = _mm512_fmadd_ps(cl_full_53_RE, dout_S3_C0_RE, out_S3_C2_RE);
out_S3_C2_RE = _mm512_fnmadd_ps(cl_full_53_IM, dout_S3_C0_IM, out_S3_C2_RE);
 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+32) + offs[8]) ), _MM_HINT_T1);

out_S3_C2_IM = _mm512_fmadd_ps(cl_full_53_RE, dout_S3_C0_IM, out_S3_C2_IM);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_53_IM, dout_S3_C0_RE, out_S3_C2_IM);
out_S3_C2_RE = _mm512_fmadd_ps(cl_full_54_RE, dout_S3_C1_RE, out_S3_C2_RE);
out_S3_C2_RE = _mm512_fnmadd_ps(cl_full_54_IM, dout_S3_C1_IM, out_S3_C2_RE);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_54_RE, dout_S3_C1_IM, out_S3_C2_IM);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_54_IM, dout_S3_C1_RE, out_S3_C2_IM);
out_S3_C2_RE = _mm512_fmadd_ps(cl_full_55_RE, dout_S3_C2_RE, out_S3_C2_RE);
out_S3_C2_RE = _mm512_fnmadd_ps(cl_full_55_IM, dout_S3_C2_IM, out_S3_C2_RE);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_55_RE, dout_S3_C2_IM, out_S3_C2_IM);
out_S3_C2_IM = _mm512_fmadd_ps(cl_full_55_IM, dout_S3_C2_RE, out_S3_C2_IM);
_mm256_storeu_si256((__m256i*)((*oBase)[0][0][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[0]))), 0xf, out_S0_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][0][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[4]))), 0xf0, out_S0_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][0][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[8]))), 0xf00, out_S0_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][0][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][0] + offs[12]))), 0xf000, out_S0_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][0][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[0]))), 0xf, out_S0_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][0][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[4]))), 0xf0, out_S0_C0_IM), _MM_FROUND_TO_NEAREST_INT));

 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+32) + offs[12]) ), _MM_HINT_T1);

_mm256_storeu_si256((__m256i*)((*oBase)[0][0][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[8]))), 0xf00, out_S0_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][0][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][0][1] + offs[12]))), 0xf000, out_S0_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[0]))), 0xf, out_S0_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[4]))), 0xf0, out_S0_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[8]))), 0xf00, out_S0_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][0] + offs[12]))), 0xf000, out_S0_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[0]))), 0xf, out_S0_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[4]))), 0xf0, out_S0_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[8]))), 0xf00, out_S0_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][0][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][0][1] + offs[12]))), 0xf000, out_S0_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[0]))), 0xf, out_S0_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[4]))), 0xf0, out_S0_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[8]))), 0xf00, out_S0_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][0] + offs[12]))), 0xf000, out_S0_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[0]))), 0xf, out_S0_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[4]))), 0xf0, out_S0_C2_IM), _MM_FROUND_TO_NEAREST_INT));

 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+64) + offs[0]) ), _MM_HINT_T1);

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[8]))), 0xf00, out_S0_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][0][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][0][1] + offs[12]))), 0xf000, out_S0_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[0]))), 0xf, out_S1_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[4]))), 0xf0, out_S1_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[8]))), 0xf00, out_S1_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][0] + offs[12]))), 0xf000, out_S1_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[0]))), 0xf, out_S1_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[4]))), 0xf0, out_S1_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[8]))), 0xf00, out_S1_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][1][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][1][1] + offs[12]))), 0xf000, out_S1_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[0]))), 0xf, out_S1_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[4]))), 0xf0, out_S1_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[8]))), 0xf00, out_S1_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][0] + offs[12]))), 0xf000, out_S1_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[0]))), 0xf, out_S1_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[4]))), 0xf0, out_S1_C1_IM), _MM_FROUND_TO_NEAREST_INT));

 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+64) + offs[4]) ), _MM_HINT_T1);

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[8]))), 0xf00, out_S1_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][1][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][1][1] + offs[12]))), 0xf000, out_S1_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[0]))), 0xf, out_S1_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[4]))), 0xf0, out_S1_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[8]))), 0xf00, out_S1_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][0] + offs[12]))), 0xf000, out_S1_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[0]))), 0xf, out_S1_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[4]))), 0xf0, out_S1_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[8]))), 0xf00, out_S1_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][1][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][1][1] + offs[12]))), 0xf000, out_S1_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[0]))), 0xf, out_S2_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[4]))), 0xf0, out_S2_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[8]))), 0xf00, out_S2_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][0] + offs[12]))), 0xf000, out_S2_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[0]))), 0xf, out_S2_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[4]))), 0xf0, out_S2_C0_IM), _MM_FROUND_TO_NEAREST_INT));

 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+64) + offs[8]) ), _MM_HINT_T1);

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[8]))), 0xf00, out_S2_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][2][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][2][1] + offs[12]))), 0xf000, out_S2_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[0]))), 0xf, out_S2_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[4]))), 0xf0, out_S2_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[8]))), 0xf00, out_S2_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][0] + offs[12]))), 0xf000, out_S2_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[0]))), 0xf, out_S2_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[4]))), 0xf0, out_S2_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[8]))), 0xf00, out_S2_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][2][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][2][1] + offs[12]))), 0xf000, out_S2_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[0]))), 0xf, out_S2_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[4]))), 0xf0, out_S2_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[8]))), 0xf00, out_S2_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][0] + offs[12]))), 0xf000, out_S2_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[0]))), 0xf, out_S2_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[4]))), 0xf0, out_S2_C2_IM), _MM_FROUND_TO_NEAREST_INT));

 _mm_prefetch((const char *)( ((((*oBase)[0][0][0] + soprefdist)+64) + offs[12]) ), _MM_HINT_T1);

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[8]))), 0xf00, out_S2_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][2][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][2][1] + offs[12]))), 0xf000, out_S2_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[0]))), 0xf, out_S3_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[4]))), 0xf0, out_S3_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[8]))), 0xf00, out_S3_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][0] + offs[12]))), 0xf000, out_S3_C0_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[0]))), 0xf, out_S3_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[4]))), 0xf0, out_S3_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[8]))), 0xf00, out_S3_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[0][3][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[0][3][1] + offs[12]))), 0xf000, out_S3_C0_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[0]))), 0xf, out_S3_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[4]))), 0xf0, out_S3_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[8]))), 0xf00, out_S3_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][0] + offs[12]))), 0xf000, out_S3_C1_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[0]))), 0xf, out_S3_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[4]))), 0xf0, out_S3_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[8]))), 0xf00, out_S3_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[1][3][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[1][3][1] + offs[12]))), 0xf000, out_S3_C1_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][0] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[0]))), 0xf, out_S3_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][0] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[4]))), 0xf0, out_S3_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][0] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[8]))), 0xf00, out_S3_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][0] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][0] + offs[12]))), 0xf000, out_S3_C2_RE), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][1] + offs[0]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[0]))), 0xf, out_S3_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][1] + offs[4]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[4]))), 0xf0, out_S3_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][1] + offs[8]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[8]))), 0xf00, out_S3_C2_IM), _MM_FROUND_TO_NEAREST_INT));

_mm256_storeu_si256((__m256i*)((*oBase)[2][3][1] + offs[12]), _mm512_cvtps_ph(_mm512_mask_compress_ps(_mm512_cvtph_ps(_mm256_loadu_si256((__m256i const *)((*oBase)[2][3][1] + offs[12]))), 0xf000, out_S3_C2_IM), _MM_FROUND_TO_NEAREST_INT));

