{# Copyright Â© 2017 Martin Ueding <dev@martin-ueding.de> #}

// {{ generated_warning }}

#include <iostream>

{% macro include_generated_kernel(isa, kernel, operator, fptype, vec, soa, compress12) -%}
{% if compress12 == '' -%}
{% set suffix = '' -%}
{% else -%}
{% set suffix = '_12' if compress12 == 'true' else '_18' -%}
{% endif -%}
{% set filename = 'generated/%s_%s_%s_%s_v%d_s%d%s'|format(kernel, operator, fptype, fptype, vec, soa, suffix) -%}
    #include "{{ filename }}"
{%- endmacro -%}

{% macro include_generated_kernel_ts(isa, kernel, operator, fptype, vec, soa, compress12, tbc_ts) -%}
{% if compress12 == '' -%}
{% set suffix = '' -%}
{% else -%}
{% set suffix = '_12' if compress12 == 'true' else '_18' -%}
{% endif -%}
{% set filename = 'generated/%s_%s_%s_%s_v%d_s%d%s_%s'|format(kernel, operator, fptype, fptype, vec, soa, suffix, tbc_ts) -%}
{# Travis CI has a limit of 50 minutes of building time. This time is
insufficient for compiling all 16 variants of the twisted boundary conditions.
Therefore we only build one of them really, the other ones are empty functions.
#}
{% if not skip_build or tbc_ts == 'ttst' or isa == 'scalar' or isa == 'avx' -%}
    #include "{{ filename }}"
{% endif -%}
{%- endmacro -%}

{% macro definition_instantiation(operator) %}
template <>
{{ caller() }} {
{{ include_generated_kernel_ts(ISA, kernel, operator, FPTYPE, VEC, SOA, COMPRESS12, tbc_ts) }}
}

template
{{ caller() }};
{% endmacro %}


{#
The following ex command can be used in Vim to replace all the C++ preprocessor
includes with the Jinja2 include.

%s#\v\#include INCLUDE_FILE_VAR\(qphix/avx2/generated/(.+),FPTYPE,VEC,SOA,COMPRESS_SUFFIX\)#// clang-format off{{ include_generated_kernel(ISA, "\1", FPTYPE, VEC, SOA, COMPRESS12) }}// clang-format on#
#}


{% for extra_include in extra_includes_local %}
#include "{{ extra_include }}"
{% endfor %}

{% for extra_include in extra_includes_global %}
#include <{{ extra_include }}>
{% endfor %}

{% if ISA == 'scalar' %}
/* Disgusting hack to get rid of _mm_prefetches left in the generated scalar code */
#define _mm_prefetch(a,b) {}
{% endif %}

{# {% include 'jinja/%s_general.h.j2'|format(kernel_base) %} #}

{% set kernel = kernel_pattern|format(fptype_underscore=FPTYPE+'_') %}
#define FPTYPE {{ FPTYPE }}
#define VEC {{ VEC }}
#define SOA {{ SOA }}
#define COMPRESS12 {{ COMPRESS12 }}
namespace QPhiX {
{% include '%s_spec.h.j2'|format(kernel_base) %}
}
#undef FPTYPE
#undef VEC
#undef SOA
#undef COMPRESS12
