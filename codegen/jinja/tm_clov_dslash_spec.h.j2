{% for isign in ['plus', 'minus'] %}
{% for tbc in [True, False] %}
{% set tbc_template = 'true' if tbc else 'false' %}
{% set tbc_suffix = 't' if tbc else 's' %}
template <>
void tm_clov_face_finish_dir_{{ isign }}<FPTYPE, VEC, SOA, COMPRESS12, {{ tbc_template }}>(
    const FPTYPE *inbuf,
    const Types<FPTYPE, VEC, SOA, COMPRESS12>::SU3MatrixBlock *gBase,
    Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *oBase,
    const typename Types<FPTYPE, VEC, SOA, COMPRESS12>::FullCloverBlock
        *clBase,
    const int gOffs[VEC],
    const int offs[VEC],
    const int hsprefdist,
    const int gprefdist,
    const int soprefdist,
    const int clprefdist,
    const FPTYPE beta,
    unsigned int mask,
    int dir,
    const FPTYPE tbc_phases[4][2]) {
    if (dir == 0) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_back_X_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else if (dir == 1) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_forw_X_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else if (dir == 2) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_back_Y_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else if (dir == 3) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_forw_Y_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else if (dir == 4) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_back_Z_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else if (dir == 5) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_forw_Z_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else if (dir == 6) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_back_T_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else if (dir == 7) {
        {{ include_generated_kernel_ts(ISA, kernel, "face_unpack_from_forw_T_"+isign, FPTYPE, VEC, SOA, COMPRESS12, tbc_suffix) }}
    } else {
        ::std::cout << "Invalid dir for unpack boundary" << ::std::endl;
        ::std::exit(1);
    }
}

template
void tm_clov_face_finish_dir_{{ isign }}<FPTYPE, VEC, SOA, COMPRESS12, {{ tbc_template }}>(
    const FPTYPE *inbuf,
    const Types<FPTYPE, VEC, SOA, COMPRESS12>::SU3MatrixBlock *gBase,
    Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *oBase,
    const typename Types<FPTYPE, VEC, SOA, COMPRESS12>::FullCloverBlock
        *clBase,
    const int gOffs[VEC],
    const int offs[VEC],
    const int hsprefdist,
    const int gprefdist,
    const int soprefdist,
    const int clprefdist,
    const FPTYPE beta,
    unsigned int mask,
    int dir,
    const FPTYPE tbc_phases[4][2]);
{% endfor %}
{% endfor %}

template <>
void tm_clov_two_flav_inverse_clover_term<FPTYPE, VEC, SOA, COMPRESS12>(
  Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *oBase,
  Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *o2Base,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *chiBase,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *chi2Base,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FullCloverBlock *fclBase,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FullCloverBlock *fcl2Base,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::CloverBlock *clBase,
  const int offs[VEC]){
    {{ include_generated_kernel(ISA, kernel, "two_flav_inverse_clover_term", FPTYPE, VEC, SOA, "") }}
}

template
void tm_clov_two_flav_inverse_clover_term<FPTYPE, VEC, SOA, COMPRESS12>(
  Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *oBase,
  Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *o2Base,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *chiBase,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FourSpinorBlock *chi2Base,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FullCloverBlock *fclBase,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::FullCloverBlock *fcl2Base,
  const Types<FPTYPE, VEC, SOA, COMPRESS12>::CloverBlock *clBase,
  const int offs[VEC]);

